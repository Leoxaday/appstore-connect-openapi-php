<?php
/**
 * BetaTestersApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BetaTestersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BetaTestersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation betaTestersAppsDeleteToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterAppsLinkagesRequest $beta_tester_apps_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function betaTestersAppsDeleteToManyRelationship($id, $beta_tester_apps_linkages_request)
    {
        $this->betaTestersAppsDeleteToManyRelationshipWithHttpInfo($id, $beta_tester_apps_linkages_request);
    }

    /**
     * Operation betaTestersAppsDeleteToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterAppsLinkagesRequest $beta_tester_apps_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersAppsDeleteToManyRelationshipWithHttpInfo($id, $beta_tester_apps_linkages_request)
    {
        $request = $this->betaTestersAppsDeleteToManyRelationshipRequest($id, $beta_tester_apps_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersAppsDeleteToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterAppsLinkagesRequest $beta_tester_apps_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersAppsDeleteToManyRelationshipAsync($id, $beta_tester_apps_linkages_request)
    {
        return $this->betaTestersAppsDeleteToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_apps_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersAppsDeleteToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterAppsLinkagesRequest $beta_tester_apps_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersAppsDeleteToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_apps_linkages_request)
    {
        $returnType = '';
        $request = $this->betaTestersAppsDeleteToManyRelationshipRequest($id, $beta_tester_apps_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersAppsDeleteToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterAppsLinkagesRequest $beta_tester_apps_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersAppsDeleteToManyRelationshipRequest($id, $beta_tester_apps_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersAppsDeleteToManyRelationship'
            );
        }
        // verify the required parameter 'beta_tester_apps_linkages_request' is set
        if ($beta_tester_apps_linkages_request === null || (is_array($beta_tester_apps_linkages_request) && count($beta_tester_apps_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $beta_tester_apps_linkages_request when calling betaTestersAppsDeleteToManyRelationship'
            );
        }

        $resourcePath = '/v1/betaTesters/{id}/relationships/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($beta_tester_apps_linkages_request)) {
            $_tempBody = $beta_tester_apps_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersAppsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppsResponse
     */
    public function betaTestersAppsGetToManyRelated($id, $fields_apps = null, $limit = null)
    {
        list($response) = $this->betaTestersAppsGetToManyRelatedWithHttpInfo($id, $fields_apps, $limit);
        return $response;
    }

    /**
     * Operation betaTestersAppsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersAppsGetToManyRelatedWithHttpInfo($id, $fields_apps = null, $limit = null)
    {
        $request = $this->betaTestersAppsGetToManyRelatedRequest($id, $fields_apps, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersAppsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersAppsGetToManyRelatedAsync($id, $fields_apps = null, $limit = null)
    {
        return $this->betaTestersAppsGetToManyRelatedAsyncWithHttpInfo($id, $fields_apps, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersAppsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersAppsGetToManyRelatedAsyncWithHttpInfo($id, $fields_apps = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppsResponse';
        $request = $this->betaTestersAppsGetToManyRelatedRequest($id, $fields_apps, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersAppsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersAppsGetToManyRelatedRequest($id, $fields_apps = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersAppsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BetaTestersApi.betaTestersAppsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/betaTesters/{id}/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersAppsGetToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterAppsLinkagesResponse
     */
    public function betaTestersAppsGetToManyRelationship($id, $limit = null)
    {
        list($response) = $this->betaTestersAppsGetToManyRelationshipWithHttpInfo($id, $limit);
        return $response;
    }

    /**
     * Operation betaTestersAppsGetToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterAppsLinkagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersAppsGetToManyRelationshipWithHttpInfo($id, $limit = null)
    {
        $request = $this->betaTestersAppsGetToManyRelationshipRequest($id, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaTesterAppsLinkagesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaTesterAppsLinkagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaTesterAppsLinkagesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaTesterAppsLinkagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersAppsGetToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersAppsGetToManyRelationshipAsync($id, $limit = null)
    {
        return $this->betaTestersAppsGetToManyRelationshipAsyncWithHttpInfo($id, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersAppsGetToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersAppsGetToManyRelationshipAsyncWithHttpInfo($id, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaTesterAppsLinkagesResponse';
        $request = $this->betaTestersAppsGetToManyRelationshipRequest($id, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersAppsGetToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersAppsGetToManyRelationshipRequest($id, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersAppsGetToManyRelationship'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BetaTestersApi.betaTestersAppsGetToManyRelationship, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/betaTesters/{id}/relationships/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBetaGroupsCreateToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function betaTestersBetaGroupsCreateToManyRelationship($id, $beta_tester_beta_groups_linkages_request)
    {
        $this->betaTestersBetaGroupsCreateToManyRelationshipWithHttpInfo($id, $beta_tester_beta_groups_linkages_request);
    }

    /**
     * Operation betaTestersBetaGroupsCreateToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBetaGroupsCreateToManyRelationshipWithHttpInfo($id, $beta_tester_beta_groups_linkages_request)
    {
        $request = $this->betaTestersBetaGroupsCreateToManyRelationshipRequest($id, $beta_tester_beta_groups_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBetaGroupsCreateToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsCreateToManyRelationshipAsync($id, $beta_tester_beta_groups_linkages_request)
    {
        return $this->betaTestersBetaGroupsCreateToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_beta_groups_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBetaGroupsCreateToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsCreateToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_beta_groups_linkages_request)
    {
        $returnType = '';
        $request = $this->betaTestersBetaGroupsCreateToManyRelationshipRequest($id, $beta_tester_beta_groups_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBetaGroupsCreateToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBetaGroupsCreateToManyRelationshipRequest($id, $beta_tester_beta_groups_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBetaGroupsCreateToManyRelationship'
            );
        }
        // verify the required parameter 'beta_tester_beta_groups_linkages_request' is set
        if ($beta_tester_beta_groups_linkages_request === null || (is_array($beta_tester_beta_groups_linkages_request) && count($beta_tester_beta_groups_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $beta_tester_beta_groups_linkages_request when calling betaTestersBetaGroupsCreateToManyRelationship'
            );
        }

        $resourcePath = '/v1/betaTesters/{id}/relationships/betaGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($beta_tester_beta_groups_linkages_request)) {
            $_tempBody = $beta_tester_beta_groups_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBetaGroupsDeleteToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function betaTestersBetaGroupsDeleteToManyRelationship($id, $beta_tester_beta_groups_linkages_request)
    {
        $this->betaTestersBetaGroupsDeleteToManyRelationshipWithHttpInfo($id, $beta_tester_beta_groups_linkages_request);
    }

    /**
     * Operation betaTestersBetaGroupsDeleteToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBetaGroupsDeleteToManyRelationshipWithHttpInfo($id, $beta_tester_beta_groups_linkages_request)
    {
        $request = $this->betaTestersBetaGroupsDeleteToManyRelationshipRequest($id, $beta_tester_beta_groups_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBetaGroupsDeleteToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsDeleteToManyRelationshipAsync($id, $beta_tester_beta_groups_linkages_request)
    {
        return $this->betaTestersBetaGroupsDeleteToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_beta_groups_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBetaGroupsDeleteToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsDeleteToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_beta_groups_linkages_request)
    {
        $returnType = '';
        $request = $this->betaTestersBetaGroupsDeleteToManyRelationshipRequest($id, $beta_tester_beta_groups_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBetaGroupsDeleteToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesRequest $beta_tester_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBetaGroupsDeleteToManyRelationshipRequest($id, $beta_tester_beta_groups_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBetaGroupsDeleteToManyRelationship'
            );
        }
        // verify the required parameter 'beta_tester_beta_groups_linkages_request' is set
        if ($beta_tester_beta_groups_linkages_request === null || (is_array($beta_tester_beta_groups_linkages_request) && count($beta_tester_beta_groups_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $beta_tester_beta_groups_linkages_request when calling betaTestersBetaGroupsDeleteToManyRelationship'
            );
        }

        $resourcePath = '/v1/betaTesters/{id}/relationships/betaGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($beta_tester_beta_groups_linkages_request)) {
            $_tempBody = $beta_tester_beta_groups_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaGroupsResponse
     */
    public function betaTestersBetaGroupsGetToManyRelated($id, $fields_beta_groups = null, $limit = null)
    {
        list($response) = $this->betaTestersBetaGroupsGetToManyRelatedWithHttpInfo($id, $fields_beta_groups, $limit);
        return $response;
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaGroupsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBetaGroupsGetToManyRelatedWithHttpInfo($id, $fields_beta_groups = null, $limit = null)
    {
        $request = $this->betaTestersBetaGroupsGetToManyRelatedRequest($id, $fields_beta_groups, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaGroupsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaGroupsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaGroupsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsGetToManyRelatedAsync($id, $fields_beta_groups = null, $limit = null)
    {
        return $this->betaTestersBetaGroupsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_groups, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_groups = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaGroupsResponse';
        $request = $this->betaTestersBetaGroupsGetToManyRelatedRequest($id, $fields_beta_groups, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBetaGroupsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBetaGroupsGetToManyRelatedRequest($id, $fields_beta_groups = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBetaGroupsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BetaTestersApi.betaTestersBetaGroupsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/betaTesters/{id}/betaGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_groups)) {
            $fields_beta_groups = ObjectSerializer::serializeCollection($fields_beta_groups, 'csv', true);
        }
        if ($fields_beta_groups !== null) {
            $queryParams['fields[betaGroups]'] = ObjectSerializer::toQueryValue($fields_beta_groups);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesResponse
     */
    public function betaTestersBetaGroupsGetToManyRelationship($id, $limit = null)
    {
        list($response) = $this->betaTestersBetaGroupsGetToManyRelationshipWithHttpInfo($id, $limit);
        return $response;
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBetaGroupsGetToManyRelationshipWithHttpInfo($id, $limit = null)
    {
        $request = $this->betaTestersBetaGroupsGetToManyRelationshipRequest($id, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsGetToManyRelationshipAsync($id, $limit = null)
    {
        return $this->betaTestersBetaGroupsGetToManyRelationshipAsyncWithHttpInfo($id, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBetaGroupsGetToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBetaGroupsGetToManyRelationshipAsyncWithHttpInfo($id, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaTesterBetaGroupsLinkagesResponse';
        $request = $this->betaTestersBetaGroupsGetToManyRelationshipRequest($id, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBetaGroupsGetToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBetaGroupsGetToManyRelationshipRequest($id, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBetaGroupsGetToManyRelationship'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BetaTestersApi.betaTestersBetaGroupsGetToManyRelationship, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/betaTesters/{id}/relationships/betaGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBuildsCreateToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function betaTestersBuildsCreateToManyRelationship($id, $beta_tester_builds_linkages_request)
    {
        $this->betaTestersBuildsCreateToManyRelationshipWithHttpInfo($id, $beta_tester_builds_linkages_request);
    }

    /**
     * Operation betaTestersBuildsCreateToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBuildsCreateToManyRelationshipWithHttpInfo($id, $beta_tester_builds_linkages_request)
    {
        $request = $this->betaTestersBuildsCreateToManyRelationshipRequest($id, $beta_tester_builds_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBuildsCreateToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsCreateToManyRelationshipAsync($id, $beta_tester_builds_linkages_request)
    {
        return $this->betaTestersBuildsCreateToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_builds_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBuildsCreateToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsCreateToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_builds_linkages_request)
    {
        $returnType = '';
        $request = $this->betaTestersBuildsCreateToManyRelationshipRequest($id, $beta_tester_builds_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBuildsCreateToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBuildsCreateToManyRelationshipRequest($id, $beta_tester_builds_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBuildsCreateToManyRelationship'
            );
        }
        // verify the required parameter 'beta_tester_builds_linkages_request' is set
        if ($beta_tester_builds_linkages_request === null || (is_array($beta_tester_builds_linkages_request) && count($beta_tester_builds_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $beta_tester_builds_linkages_request when calling betaTestersBuildsCreateToManyRelationship'
            );
        }

        $resourcePath = '/v1/betaTesters/{id}/relationships/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($beta_tester_builds_linkages_request)) {
            $_tempBody = $beta_tester_builds_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBuildsDeleteToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function betaTestersBuildsDeleteToManyRelationship($id, $beta_tester_builds_linkages_request)
    {
        $this->betaTestersBuildsDeleteToManyRelationshipWithHttpInfo($id, $beta_tester_builds_linkages_request);
    }

    /**
     * Operation betaTestersBuildsDeleteToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBuildsDeleteToManyRelationshipWithHttpInfo($id, $beta_tester_builds_linkages_request)
    {
        $request = $this->betaTestersBuildsDeleteToManyRelationshipRequest($id, $beta_tester_builds_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBuildsDeleteToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsDeleteToManyRelationshipAsync($id, $beta_tester_builds_linkages_request)
    {
        return $this->betaTestersBuildsDeleteToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_builds_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBuildsDeleteToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsDeleteToManyRelationshipAsyncWithHttpInfo($id, $beta_tester_builds_linkages_request)
    {
        $returnType = '';
        $request = $this->betaTestersBuildsDeleteToManyRelationshipRequest($id, $beta_tester_builds_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBuildsDeleteToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BetaTesterBuildsLinkagesRequest $beta_tester_builds_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBuildsDeleteToManyRelationshipRequest($id, $beta_tester_builds_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBuildsDeleteToManyRelationship'
            );
        }
        // verify the required parameter 'beta_tester_builds_linkages_request' is set
        if ($beta_tester_builds_linkages_request === null || (is_array($beta_tester_builds_linkages_request) && count($beta_tester_builds_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $beta_tester_builds_linkages_request when calling betaTestersBuildsDeleteToManyRelationship'
            );
        }

        $resourcePath = '/v1/betaTesters/{id}/relationships/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($beta_tester_builds_linkages_request)) {
            $_tempBody = $beta_tester_builds_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBuildsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildsResponse
     */
    public function betaTestersBuildsGetToManyRelated($id, $fields_builds = null, $limit = null)
    {
        list($response) = $this->betaTestersBuildsGetToManyRelatedWithHttpInfo($id, $fields_builds, $limit);
        return $response;
    }

    /**
     * Operation betaTestersBuildsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBuildsGetToManyRelatedWithHttpInfo($id, $fields_builds = null, $limit = null)
    {
        $request = $this->betaTestersBuildsGetToManyRelatedRequest($id, $fields_builds, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBuildsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsGetToManyRelatedAsync($id, $fields_builds = null, $limit = null)
    {
        return $this->betaTestersBuildsGetToManyRelatedAsyncWithHttpInfo($id, $fields_builds, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBuildsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsGetToManyRelatedAsyncWithHttpInfo($id, $fields_builds = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BuildsResponse';
        $request = $this->betaTestersBuildsGetToManyRelatedRequest($id, $fields_builds, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBuildsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBuildsGetToManyRelatedRequest($id, $fields_builds = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBuildsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BetaTestersApi.betaTestersBuildsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/betaTesters/{id}/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersBuildsGetToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterBuildsLinkagesResponse
     */
    public function betaTestersBuildsGetToManyRelationship($id, $limit = null)
    {
        list($response) = $this->betaTestersBuildsGetToManyRelationshipWithHttpInfo($id, $limit);
        return $response;
    }

    /**
     * Operation betaTestersBuildsGetToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterBuildsLinkagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersBuildsGetToManyRelationshipWithHttpInfo($id, $limit = null)
    {
        $request = $this->betaTestersBuildsGetToManyRelationshipRequest($id, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaTesterBuildsLinkagesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaTesterBuildsLinkagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaTesterBuildsLinkagesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaTesterBuildsLinkagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersBuildsGetToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsGetToManyRelationshipAsync($id, $limit = null)
    {
        return $this->betaTestersBuildsGetToManyRelationshipAsyncWithHttpInfo($id, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersBuildsGetToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersBuildsGetToManyRelationshipAsyncWithHttpInfo($id, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaTesterBuildsLinkagesResponse';
        $request = $this->betaTestersBuildsGetToManyRelationshipRequest($id, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersBuildsGetToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersBuildsGetToManyRelationshipRequest($id, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersBuildsGetToManyRelationship'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BetaTestersApi.betaTestersBuildsGetToManyRelationship, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/betaTesters/{id}/relationships/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersCreateInstance
     *
     * @param  \OpenAPI\Client\Model\BetaTesterCreateRequest $beta_tester_create_request BetaTester representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterResponse|\OpenAPI\Client\Model\ErrorResponse
     */
    public function betaTestersCreateInstance($beta_tester_create_request)
    {
        list($response) = $this->betaTestersCreateInstanceWithHttpInfo($beta_tester_create_request);
        return $response;
    }

    /**
     * Operation betaTestersCreateInstanceWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\BetaTesterCreateRequest $beta_tester_create_request BetaTester representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterResponse|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersCreateInstanceWithHttpInfo($beta_tester_create_request)
    {
        $request = $this->betaTestersCreateInstanceRequest($beta_tester_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\BetaTesterResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaTesterResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaTesterResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaTesterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersCreateInstanceAsync
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\BetaTesterCreateRequest $beta_tester_create_request BetaTester representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersCreateInstanceAsync($beta_tester_create_request)
    {
        return $this->betaTestersCreateInstanceAsyncWithHttpInfo($beta_tester_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersCreateInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\BetaTesterCreateRequest $beta_tester_create_request BetaTester representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersCreateInstanceAsyncWithHttpInfo($beta_tester_create_request)
    {
        $returnType = '\OpenAPI\Client\Model\BetaTesterResponse';
        $request = $this->betaTestersCreateInstanceRequest($beta_tester_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersCreateInstance'
     *
     * @param  \OpenAPI\Client\Model\BetaTesterCreateRequest $beta_tester_create_request BetaTester representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersCreateInstanceRequest($beta_tester_create_request)
    {
        // verify the required parameter 'beta_tester_create_request' is set
        if ($beta_tester_create_request === null || (is_array($beta_tester_create_request) && count($beta_tester_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $beta_tester_create_request when calling betaTestersCreateInstance'
            );
        }

        $resourcePath = '/v1/betaTesters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($beta_tester_create_request)) {
            $_tempBody = $beta_tester_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersDeleteInstance
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function betaTestersDeleteInstance($id)
    {
        $this->betaTestersDeleteInstanceWithHttpInfo($id);
    }

    /**
     * Operation betaTestersDeleteInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersDeleteInstanceWithHttpInfo($id)
    {
        $request = $this->betaTestersDeleteInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersDeleteInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersDeleteInstanceAsync($id)
    {
        return $this->betaTestersDeleteInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersDeleteInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersDeleteInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->betaTestersDeleteInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersDeleteInstance'
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersDeleteInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersDeleteInstance'
            );
        }

        $resourcePath = '/v1/betaTesters/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersGetCollection
     *
     * @param  string[] $filter_email filter by attribute &#39;email&#39; (optional)
     * @param  string[] $filter_first_name filter by attribute &#39;firstName&#39; (optional)
     * @param  string[] $filter_invite_type filter by attribute &#39;inviteType&#39; (optional)
     * @param  string[] $filter_last_name filter by attribute &#39;lastName&#39; (optional)
     * @param  string[] $filter_apps filter by id(s) of related &#39;apps&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_builds filter by id(s) of related &#39;builds&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTestersResponse
     */
    public function betaTestersGetCollection($filter_email = null, $filter_first_name = null, $filter_invite_type = null, $filter_last_name = null, $filter_apps = null, $filter_beta_groups = null, $filter_builds = null, $sort = null, $fields_beta_testers = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        list($response) = $this->betaTestersGetCollectionWithHttpInfo($filter_email, $filter_first_name, $filter_invite_type, $filter_last_name, $filter_apps, $filter_beta_groups, $filter_builds, $sort, $fields_beta_testers, $limit, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds);
        return $response;
    }

    /**
     * Operation betaTestersGetCollectionWithHttpInfo
     *
     * @param  string[] $filter_email filter by attribute &#39;email&#39; (optional)
     * @param  string[] $filter_first_name filter by attribute &#39;firstName&#39; (optional)
     * @param  string[] $filter_invite_type filter by attribute &#39;inviteType&#39; (optional)
     * @param  string[] $filter_last_name filter by attribute &#39;lastName&#39; (optional)
     * @param  string[] $filter_apps filter by id(s) of related &#39;apps&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_builds filter by id(s) of related &#39;builds&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTestersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersGetCollectionWithHttpInfo($filter_email = null, $filter_first_name = null, $filter_invite_type = null, $filter_last_name = null, $filter_apps = null, $filter_beta_groups = null, $filter_builds = null, $sort = null, $fields_beta_testers = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        $request = $this->betaTestersGetCollectionRequest($filter_email, $filter_first_name, $filter_invite_type, $filter_last_name, $filter_apps, $filter_beta_groups, $filter_builds, $sort, $fields_beta_testers, $limit, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaTestersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaTestersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaTestersResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaTestersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersGetCollectionAsync
     *
     * 
     *
     * @param  string[] $filter_email filter by attribute &#39;email&#39; (optional)
     * @param  string[] $filter_first_name filter by attribute &#39;firstName&#39; (optional)
     * @param  string[] $filter_invite_type filter by attribute &#39;inviteType&#39; (optional)
     * @param  string[] $filter_last_name filter by attribute &#39;lastName&#39; (optional)
     * @param  string[] $filter_apps filter by id(s) of related &#39;apps&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_builds filter by id(s) of related &#39;builds&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersGetCollectionAsync($filter_email = null, $filter_first_name = null, $filter_invite_type = null, $filter_last_name = null, $filter_apps = null, $filter_beta_groups = null, $filter_builds = null, $sort = null, $fields_beta_testers = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        return $this->betaTestersGetCollectionAsyncWithHttpInfo($filter_email, $filter_first_name, $filter_invite_type, $filter_last_name, $filter_apps, $filter_beta_groups, $filter_builds, $sort, $fields_beta_testers, $limit, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersGetCollectionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $filter_email filter by attribute &#39;email&#39; (optional)
     * @param  string[] $filter_first_name filter by attribute &#39;firstName&#39; (optional)
     * @param  string[] $filter_invite_type filter by attribute &#39;inviteType&#39; (optional)
     * @param  string[] $filter_last_name filter by attribute &#39;lastName&#39; (optional)
     * @param  string[] $filter_apps filter by id(s) of related &#39;apps&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_builds filter by id(s) of related &#39;builds&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersGetCollectionAsyncWithHttpInfo($filter_email = null, $filter_first_name = null, $filter_invite_type = null, $filter_last_name = null, $filter_apps = null, $filter_beta_groups = null, $filter_builds = null, $sort = null, $fields_beta_testers = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaTestersResponse';
        $request = $this->betaTestersGetCollectionRequest($filter_email, $filter_first_name, $filter_invite_type, $filter_last_name, $filter_apps, $filter_beta_groups, $filter_builds, $sort, $fields_beta_testers, $limit, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersGetCollection'
     *
     * @param  string[] $filter_email filter by attribute &#39;email&#39; (optional)
     * @param  string[] $filter_first_name filter by attribute &#39;firstName&#39; (optional)
     * @param  string[] $filter_invite_type filter by attribute &#39;inviteType&#39; (optional)
     * @param  string[] $filter_last_name filter by attribute &#39;lastName&#39; (optional)
     * @param  string[] $filter_apps filter by id(s) of related &#39;apps&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_builds filter by id(s) of related &#39;builds&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersGetCollectionRequest($filter_email = null, $filter_first_name = null, $filter_invite_type = null, $filter_last_name = null, $filter_apps = null, $filter_beta_groups = null, $filter_builds = null, $sort = null, $fields_beta_testers = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BetaTestersApi.betaTestersGetCollection, must be smaller than or equal to 200.');
        }

        if ($limit_apps !== null && $limit_apps > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_apps" when calling BetaTestersApi.betaTestersGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_beta_groups !== null && $limit_beta_groups > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_groups" when calling BetaTestersApi.betaTestersGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_builds !== null && $limit_builds > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_builds" when calling BetaTestersApi.betaTestersGetCollection, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/betaTesters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_email)) {
            $filter_email = ObjectSerializer::serializeCollection($filter_email, 'csv', true);
        }
        if ($filter_email !== null) {
            $queryParams['filter[email]'] = ObjectSerializer::toQueryValue($filter_email);
        }
        // query params
        if (is_array($filter_first_name)) {
            $filter_first_name = ObjectSerializer::serializeCollection($filter_first_name, 'csv', true);
        }
        if ($filter_first_name !== null) {
            $queryParams['filter[firstName]'] = ObjectSerializer::toQueryValue($filter_first_name);
        }
        // query params
        if (is_array($filter_invite_type)) {
            $filter_invite_type = ObjectSerializer::serializeCollection($filter_invite_type, 'csv', true);
        }
        if ($filter_invite_type !== null) {
            $queryParams['filter[inviteType]'] = ObjectSerializer::toQueryValue($filter_invite_type);
        }
        // query params
        if (is_array($filter_last_name)) {
            $filter_last_name = ObjectSerializer::serializeCollection($filter_last_name, 'csv', true);
        }
        if ($filter_last_name !== null) {
            $queryParams['filter[lastName]'] = ObjectSerializer::toQueryValue($filter_last_name);
        }
        // query params
        if (is_array($filter_apps)) {
            $filter_apps = ObjectSerializer::serializeCollection($filter_apps, 'csv', true);
        }
        if ($filter_apps !== null) {
            $queryParams['filter[apps]'] = ObjectSerializer::toQueryValue($filter_apps);
        }
        // query params
        if (is_array($filter_beta_groups)) {
            $filter_beta_groups = ObjectSerializer::serializeCollection($filter_beta_groups, 'csv', true);
        }
        if ($filter_beta_groups !== null) {
            $queryParams['filter[betaGroups]'] = ObjectSerializer::toQueryValue($filter_beta_groups);
        }
        // query params
        if (is_array($filter_builds)) {
            $filter_builds = ObjectSerializer::serializeCollection($filter_builds, 'csv', true);
        }
        if ($filter_builds !== null) {
            $queryParams['filter[builds]'] = ObjectSerializer::toQueryValue($filter_builds);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if (is_array($fields_beta_testers)) {
            $fields_beta_testers = ObjectSerializer::serializeCollection($fields_beta_testers, 'csv', true);
        }
        if ($fields_beta_testers !== null) {
            $queryParams['fields[betaTesters]'] = ObjectSerializer::toQueryValue($fields_beta_testers);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_beta_groups)) {
            $fields_beta_groups = ObjectSerializer::serializeCollection($fields_beta_groups, 'csv', true);
        }
        if ($fields_beta_groups !== null) {
            $queryParams['fields[betaGroups]'] = ObjectSerializer::toQueryValue($fields_beta_groups);
        }
        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit_apps !== null) {
            $queryParams['limit[apps]'] = ObjectSerializer::toQueryValue($limit_apps);
        }
        // query params
        if ($limit_beta_groups !== null) {
            $queryParams['limit[betaGroups]'] = ObjectSerializer::toQueryValue($limit_beta_groups);
        }
        // query params
        if ($limit_builds !== null) {
            $queryParams['limit[builds]'] = ObjectSerializer::toQueryValue($limit_builds);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation betaTestersGetInstance
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterResponse
     */
    public function betaTestersGetInstance($id, $fields_beta_testers = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        list($response) = $this->betaTestersGetInstanceWithHttpInfo($id, $fields_beta_testers, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds);
        return $response;
    }

    /**
     * Operation betaTestersGetInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTesterResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function betaTestersGetInstanceWithHttpInfo($id, $fields_beta_testers = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        $request = $this->betaTestersGetInstanceRequest($id, $fields_beta_testers, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaTesterResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaTesterResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaTesterResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaTesterResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation betaTestersGetInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersGetInstanceAsync($id, $fields_beta_testers = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        return $this->betaTestersGetInstanceAsyncWithHttpInfo($id, $fields_beta_testers, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation betaTestersGetInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function betaTestersGetInstanceAsyncWithHttpInfo($id, $fields_beta_testers = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaTesterResponse';
        $request = $this->betaTestersGetInstanceRequest($id, $fields_beta_testers, $include, $fields_beta_groups, $fields_builds, $fields_apps, $limit_apps, $limit_beta_groups, $limit_builds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'betaTestersGetInstance'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_apps maximum number of related apps returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function betaTestersGetInstanceRequest($id, $fields_beta_testers = null, $include = null, $fields_beta_groups = null, $fields_builds = null, $fields_apps = null, $limit_apps = null, $limit_beta_groups = null, $limit_builds = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling betaTestersGetInstance'
            );
        }
        if ($limit_apps !== null && $limit_apps > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_apps" when calling BetaTestersApi.betaTestersGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_beta_groups !== null && $limit_beta_groups > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_groups" when calling BetaTestersApi.betaTestersGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_builds !== null && $limit_builds > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_builds" when calling BetaTestersApi.betaTestersGetInstance, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/betaTesters/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_testers)) {
            $fields_beta_testers = ObjectSerializer::serializeCollection($fields_beta_testers, 'csv', true);
        }
        if ($fields_beta_testers !== null) {
            $queryParams['fields[betaTesters]'] = ObjectSerializer::toQueryValue($fields_beta_testers);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_beta_groups)) {
            $fields_beta_groups = ObjectSerializer::serializeCollection($fields_beta_groups, 'csv', true);
        }
        if ($fields_beta_groups !== null) {
            $queryParams['fields[betaGroups]'] = ObjectSerializer::toQueryValue($fields_beta_groups);
        }
        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit_apps !== null) {
            $queryParams['limit[apps]'] = ObjectSerializer::toQueryValue($limit_apps);
        }
        // query params
        if ($limit_beta_groups !== null) {
            $queryParams['limit[betaGroups]'] = ObjectSerializer::toQueryValue($limit_beta_groups);
        }
        // query params
        if ($limit_builds !== null) {
            $queryParams['limit[builds]'] = ObjectSerializer::toQueryValue($limit_builds);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
