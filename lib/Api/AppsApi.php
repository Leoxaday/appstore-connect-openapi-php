<?php
/**
 * AppsApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AppsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AppsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation appsAppInfosGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_categories the fields to include for returned resources of type appCategories (optional)
     * @param  string[] $fields_app_info_localizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppInfosResponse
     */
    public function appsAppInfosGetToManyRelated($id, $fields_app_infos = null, $fields_app_categories = null, $fields_app_info_localizations = null, $fields_apps = null, $limit = null, $include = null)
    {
        list($response) = $this->appsAppInfosGetToManyRelatedWithHttpInfo($id, $fields_app_infos, $fields_app_categories, $fields_app_info_localizations, $fields_apps, $limit, $include);
        return $response;
    }

    /**
     * Operation appsAppInfosGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_categories the fields to include for returned resources of type appCategories (optional)
     * @param  string[] $fields_app_info_localizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppInfosResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsAppInfosGetToManyRelatedWithHttpInfo($id, $fields_app_infos = null, $fields_app_categories = null, $fields_app_info_localizations = null, $fields_apps = null, $limit = null, $include = null)
    {
        $request = $this->appsAppInfosGetToManyRelatedRequest($id, $fields_app_infos, $fields_app_categories, $fields_app_info_localizations, $fields_apps, $limit, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppInfosResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppInfosResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppInfosResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppInfosResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsAppInfosGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_categories the fields to include for returned resources of type appCategories (optional)
     * @param  string[] $fields_app_info_localizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsAppInfosGetToManyRelatedAsync($id, $fields_app_infos = null, $fields_app_categories = null, $fields_app_info_localizations = null, $fields_apps = null, $limit = null, $include = null)
    {
        return $this->appsAppInfosGetToManyRelatedAsyncWithHttpInfo($id, $fields_app_infos, $fields_app_categories, $fields_app_info_localizations, $fields_apps, $limit, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsAppInfosGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_categories the fields to include for returned resources of type appCategories (optional)
     * @param  string[] $fields_app_info_localizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsAppInfosGetToManyRelatedAsyncWithHttpInfo($id, $fields_app_infos = null, $fields_app_categories = null, $fields_app_info_localizations = null, $fields_apps = null, $limit = null, $include = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppInfosResponse';
        $request = $this->appsAppInfosGetToManyRelatedRequest($id, $fields_app_infos, $fields_app_categories, $fields_app_info_localizations, $fields_apps, $limit, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsAppInfosGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_categories the fields to include for returned resources of type appCategories (optional)
     * @param  string[] $fields_app_info_localizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsAppInfosGetToManyRelatedRequest($id, $fields_app_infos = null, $fields_app_categories = null, $fields_app_info_localizations = null, $fields_apps = null, $limit = null, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsAppInfosGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsAppInfosGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/appInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_app_infos)) {
            $fields_app_infos = ObjectSerializer::serializeCollection($fields_app_infos, 'csv', true);
        }
        if ($fields_app_infos !== null) {
            $queryParams['fields[appInfos]'] = ObjectSerializer::toQueryValue($fields_app_infos);
        }
        // query params
        if (is_array($fields_app_categories)) {
            $fields_app_categories = ObjectSerializer::serializeCollection($fields_app_categories, 'csv', true);
        }
        if ($fields_app_categories !== null) {
            $queryParams['fields[appCategories]'] = ObjectSerializer::toQueryValue($fields_app_categories);
        }
        // query params
        if (is_array($fields_app_info_localizations)) {
            $fields_app_info_localizations = ObjectSerializer::serializeCollection($fields_app_info_localizations, 'csv', true);
        }
        if ($fields_app_info_localizations !== null) {
            $queryParams['fields[appInfoLocalizations]'] = ObjectSerializer::toQueryValue($fields_app_info_localizations);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsAppStoreVersionsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_app_store_state filter by attribute &#39;appStoreState&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $fields_idfa_declarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param  string[] $fields_app_store_version_localizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param  string[] $fields_routing_app_coverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param  string[] $fields_app_store_version_phased_releases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param  string[] $fields_age_rating_declarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param  string[] $fields_app_store_review_details the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_app_store_version_submissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppStoreVersionsResponse
     */
    public function appsAppStoreVersionsGetToManyRelated($id, $filter_app_store_state = null, $filter_platform = null, $filter_version_string = null, $filter_id = null, $fields_idfa_declarations = null, $fields_app_store_version_localizations = null, $fields_routing_app_coverages = null, $fields_app_store_version_phased_releases = null, $fields_age_rating_declarations = null, $fields_app_store_review_details = null, $fields_app_store_versions = null, $fields_builds = null, $fields_app_store_version_submissions = null, $fields_apps = null, $limit = null, $include = null)
    {
        list($response) = $this->appsAppStoreVersionsGetToManyRelatedWithHttpInfo($id, $filter_app_store_state, $filter_platform, $filter_version_string, $filter_id, $fields_idfa_declarations, $fields_app_store_version_localizations, $fields_routing_app_coverages, $fields_app_store_version_phased_releases, $fields_age_rating_declarations, $fields_app_store_review_details, $fields_app_store_versions, $fields_builds, $fields_app_store_version_submissions, $fields_apps, $limit, $include);
        return $response;
    }

    /**
     * Operation appsAppStoreVersionsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_app_store_state filter by attribute &#39;appStoreState&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $fields_idfa_declarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param  string[] $fields_app_store_version_localizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param  string[] $fields_routing_app_coverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param  string[] $fields_app_store_version_phased_releases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param  string[] $fields_age_rating_declarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param  string[] $fields_app_store_review_details the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_app_store_version_submissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppStoreVersionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsAppStoreVersionsGetToManyRelatedWithHttpInfo($id, $filter_app_store_state = null, $filter_platform = null, $filter_version_string = null, $filter_id = null, $fields_idfa_declarations = null, $fields_app_store_version_localizations = null, $fields_routing_app_coverages = null, $fields_app_store_version_phased_releases = null, $fields_age_rating_declarations = null, $fields_app_store_review_details = null, $fields_app_store_versions = null, $fields_builds = null, $fields_app_store_version_submissions = null, $fields_apps = null, $limit = null, $include = null)
    {
        $request = $this->appsAppStoreVersionsGetToManyRelatedRequest($id, $filter_app_store_state, $filter_platform, $filter_version_string, $filter_id, $fields_idfa_declarations, $fields_app_store_version_localizations, $fields_routing_app_coverages, $fields_app_store_version_phased_releases, $fields_age_rating_declarations, $fields_app_store_review_details, $fields_app_store_versions, $fields_builds, $fields_app_store_version_submissions, $fields_apps, $limit, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppStoreVersionsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppStoreVersionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppStoreVersionsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppStoreVersionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsAppStoreVersionsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_app_store_state filter by attribute &#39;appStoreState&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $fields_idfa_declarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param  string[] $fields_app_store_version_localizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param  string[] $fields_routing_app_coverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param  string[] $fields_app_store_version_phased_releases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param  string[] $fields_age_rating_declarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param  string[] $fields_app_store_review_details the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_app_store_version_submissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsAppStoreVersionsGetToManyRelatedAsync($id, $filter_app_store_state = null, $filter_platform = null, $filter_version_string = null, $filter_id = null, $fields_idfa_declarations = null, $fields_app_store_version_localizations = null, $fields_routing_app_coverages = null, $fields_app_store_version_phased_releases = null, $fields_age_rating_declarations = null, $fields_app_store_review_details = null, $fields_app_store_versions = null, $fields_builds = null, $fields_app_store_version_submissions = null, $fields_apps = null, $limit = null, $include = null)
    {
        return $this->appsAppStoreVersionsGetToManyRelatedAsyncWithHttpInfo($id, $filter_app_store_state, $filter_platform, $filter_version_string, $filter_id, $fields_idfa_declarations, $fields_app_store_version_localizations, $fields_routing_app_coverages, $fields_app_store_version_phased_releases, $fields_age_rating_declarations, $fields_app_store_review_details, $fields_app_store_versions, $fields_builds, $fields_app_store_version_submissions, $fields_apps, $limit, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsAppStoreVersionsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_app_store_state filter by attribute &#39;appStoreState&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $fields_idfa_declarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param  string[] $fields_app_store_version_localizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param  string[] $fields_routing_app_coverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param  string[] $fields_app_store_version_phased_releases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param  string[] $fields_age_rating_declarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param  string[] $fields_app_store_review_details the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_app_store_version_submissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsAppStoreVersionsGetToManyRelatedAsyncWithHttpInfo($id, $filter_app_store_state = null, $filter_platform = null, $filter_version_string = null, $filter_id = null, $fields_idfa_declarations = null, $fields_app_store_version_localizations = null, $fields_routing_app_coverages = null, $fields_app_store_version_phased_releases = null, $fields_age_rating_declarations = null, $fields_app_store_review_details = null, $fields_app_store_versions = null, $fields_builds = null, $fields_app_store_version_submissions = null, $fields_apps = null, $limit = null, $include = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppStoreVersionsResponse';
        $request = $this->appsAppStoreVersionsGetToManyRelatedRequest($id, $filter_app_store_state, $filter_platform, $filter_version_string, $filter_id, $fields_idfa_declarations, $fields_app_store_version_localizations, $fields_routing_app_coverages, $fields_app_store_version_phased_releases, $fields_age_rating_declarations, $fields_app_store_review_details, $fields_app_store_versions, $fields_builds, $fields_app_store_version_submissions, $fields_apps, $limit, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsAppStoreVersionsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_app_store_state filter by attribute &#39;appStoreState&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $fields_idfa_declarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param  string[] $fields_app_store_version_localizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param  string[] $fields_routing_app_coverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param  string[] $fields_app_store_version_phased_releases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param  string[] $fields_age_rating_declarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param  string[] $fields_app_store_review_details the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_app_store_version_submissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsAppStoreVersionsGetToManyRelatedRequest($id, $filter_app_store_state = null, $filter_platform = null, $filter_version_string = null, $filter_id = null, $fields_idfa_declarations = null, $fields_app_store_version_localizations = null, $fields_routing_app_coverages = null, $fields_app_store_version_phased_releases = null, $fields_age_rating_declarations = null, $fields_app_store_review_details = null, $fields_app_store_versions = null, $fields_builds = null, $fields_app_store_version_submissions = null, $fields_apps = null, $limit = null, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsAppStoreVersionsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsAppStoreVersionsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/appStoreVersions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_app_store_state)) {
            $filter_app_store_state = ObjectSerializer::serializeCollection($filter_app_store_state, 'csv', true);
        }
        if ($filter_app_store_state !== null) {
            $queryParams['filter[appStoreState]'] = ObjectSerializer::toQueryValue($filter_app_store_state);
        }
        // query params
        if (is_array($filter_platform)) {
            $filter_platform = ObjectSerializer::serializeCollection($filter_platform, 'csv', true);
        }
        if ($filter_platform !== null) {
            $queryParams['filter[platform]'] = ObjectSerializer::toQueryValue($filter_platform);
        }
        // query params
        if (is_array($filter_version_string)) {
            $filter_version_string = ObjectSerializer::serializeCollection($filter_version_string, 'csv', true);
        }
        if ($filter_version_string !== null) {
            $queryParams['filter[versionString]'] = ObjectSerializer::toQueryValue($filter_version_string);
        }
        // query params
        if (is_array($filter_id)) {
            $filter_id = ObjectSerializer::serializeCollection($filter_id, 'csv', true);
        }
        if ($filter_id !== null) {
            $queryParams['filter[id]'] = ObjectSerializer::toQueryValue($filter_id);
        }
        // query params
        if (is_array($fields_idfa_declarations)) {
            $fields_idfa_declarations = ObjectSerializer::serializeCollection($fields_idfa_declarations, 'csv', true);
        }
        if ($fields_idfa_declarations !== null) {
            $queryParams['fields[idfaDeclarations]'] = ObjectSerializer::toQueryValue($fields_idfa_declarations);
        }
        // query params
        if (is_array($fields_app_store_version_localizations)) {
            $fields_app_store_version_localizations = ObjectSerializer::serializeCollection($fields_app_store_version_localizations, 'csv', true);
        }
        if ($fields_app_store_version_localizations !== null) {
            $queryParams['fields[appStoreVersionLocalizations]'] = ObjectSerializer::toQueryValue($fields_app_store_version_localizations);
        }
        // query params
        if (is_array($fields_routing_app_coverages)) {
            $fields_routing_app_coverages = ObjectSerializer::serializeCollection($fields_routing_app_coverages, 'csv', true);
        }
        if ($fields_routing_app_coverages !== null) {
            $queryParams['fields[routingAppCoverages]'] = ObjectSerializer::toQueryValue($fields_routing_app_coverages);
        }
        // query params
        if (is_array($fields_app_store_version_phased_releases)) {
            $fields_app_store_version_phased_releases = ObjectSerializer::serializeCollection($fields_app_store_version_phased_releases, 'csv', true);
        }
        if ($fields_app_store_version_phased_releases !== null) {
            $queryParams['fields[appStoreVersionPhasedReleases]'] = ObjectSerializer::toQueryValue($fields_app_store_version_phased_releases);
        }
        // query params
        if (is_array($fields_age_rating_declarations)) {
            $fields_age_rating_declarations = ObjectSerializer::serializeCollection($fields_age_rating_declarations, 'csv', true);
        }
        if ($fields_age_rating_declarations !== null) {
            $queryParams['fields[ageRatingDeclarations]'] = ObjectSerializer::toQueryValue($fields_age_rating_declarations);
        }
        // query params
        if (is_array($fields_app_store_review_details)) {
            $fields_app_store_review_details = ObjectSerializer::serializeCollection($fields_app_store_review_details, 'csv', true);
        }
        if ($fields_app_store_review_details !== null) {
            $queryParams['fields[appStoreReviewDetails]'] = ObjectSerializer::toQueryValue($fields_app_store_review_details);
        }
        // query params
        if (is_array($fields_app_store_versions)) {
            $fields_app_store_versions = ObjectSerializer::serializeCollection($fields_app_store_versions, 'csv', true);
        }
        if ($fields_app_store_versions !== null) {
            $queryParams['fields[appStoreVersions]'] = ObjectSerializer::toQueryValue($fields_app_store_versions);
        }
        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if (is_array($fields_app_store_version_submissions)) {
            $fields_app_store_version_submissions = ObjectSerializer::serializeCollection($fields_app_store_version_submissions, 'csv', true);
        }
        if ($fields_app_store_version_submissions !== null) {
            $queryParams['fields[appStoreVersionSubmissions]'] = ObjectSerializer::toQueryValue($fields_app_store_version_submissions);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsAvailableTerritoriesGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\TerritoriesResponse
     */
    public function appsAvailableTerritoriesGetToManyRelated($id, $fields_territories = null, $limit = null)
    {
        list($response) = $this->appsAvailableTerritoriesGetToManyRelatedWithHttpInfo($id, $fields_territories, $limit);
        return $response;
    }

    /**
     * Operation appsAvailableTerritoriesGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\TerritoriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsAvailableTerritoriesGetToManyRelatedWithHttpInfo($id, $fields_territories = null, $limit = null)
    {
        $request = $this->appsAvailableTerritoriesGetToManyRelatedRequest($id, $fields_territories, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\TerritoriesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TerritoriesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TerritoriesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TerritoriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsAvailableTerritoriesGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsAvailableTerritoriesGetToManyRelatedAsync($id, $fields_territories = null, $limit = null)
    {
        return $this->appsAvailableTerritoriesGetToManyRelatedAsyncWithHttpInfo($id, $fields_territories, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsAvailableTerritoriesGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsAvailableTerritoriesGetToManyRelatedAsyncWithHttpInfo($id, $fields_territories = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\TerritoriesResponse';
        $request = $this->appsAvailableTerritoriesGetToManyRelatedRequest($id, $fields_territories, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsAvailableTerritoriesGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsAvailableTerritoriesGetToManyRelatedRequest($id, $fields_territories = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsAvailableTerritoriesGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsAvailableTerritoriesGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/availableTerritories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_territories)) {
            $fields_territories = ObjectSerializer::serializeCollection($fields_territories, 'csv', true);
        }
        if ($fields_territories !== null) {
            $queryParams['fields[territories]'] = ObjectSerializer::toQueryValue($fields_territories);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsBetaAppLocalizationsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaAppLocalizationsResponse
     */
    public function appsBetaAppLocalizationsGetToManyRelated($id, $fields_beta_app_localizations = null, $limit = null)
    {
        list($response) = $this->appsBetaAppLocalizationsGetToManyRelatedWithHttpInfo($id, $fields_beta_app_localizations, $limit);
        return $response;
    }

    /**
     * Operation appsBetaAppLocalizationsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaAppLocalizationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsBetaAppLocalizationsGetToManyRelatedWithHttpInfo($id, $fields_beta_app_localizations = null, $limit = null)
    {
        $request = $this->appsBetaAppLocalizationsGetToManyRelatedRequest($id, $fields_beta_app_localizations, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaAppLocalizationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaAppLocalizationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaAppLocalizationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaAppLocalizationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsBetaAppLocalizationsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaAppLocalizationsGetToManyRelatedAsync($id, $fields_beta_app_localizations = null, $limit = null)
    {
        return $this->appsBetaAppLocalizationsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_app_localizations, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsBetaAppLocalizationsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaAppLocalizationsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_app_localizations = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaAppLocalizationsResponse';
        $request = $this->appsBetaAppLocalizationsGetToManyRelatedRequest($id, $fields_beta_app_localizations, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsBetaAppLocalizationsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsBetaAppLocalizationsGetToManyRelatedRequest($id, $fields_beta_app_localizations = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsBetaAppLocalizationsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsBetaAppLocalizationsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/betaAppLocalizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_app_localizations)) {
            $fields_beta_app_localizations = ObjectSerializer::serializeCollection($fields_beta_app_localizations, 'csv', true);
        }
        if ($fields_beta_app_localizations !== null) {
            $queryParams['fields[betaAppLocalizations]'] = ObjectSerializer::toQueryValue($fields_beta_app_localizations);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsBetaAppReviewDetailGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaAppReviewDetailResponse
     */
    public function appsBetaAppReviewDetailGetToOneRelated($id, $fields_beta_app_review_details = null)
    {
        list($response) = $this->appsBetaAppReviewDetailGetToOneRelatedWithHttpInfo($id, $fields_beta_app_review_details);
        return $response;
    }

    /**
     * Operation appsBetaAppReviewDetailGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaAppReviewDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsBetaAppReviewDetailGetToOneRelatedWithHttpInfo($id, $fields_beta_app_review_details = null)
    {
        $request = $this->appsBetaAppReviewDetailGetToOneRelatedRequest($id, $fields_beta_app_review_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaAppReviewDetailResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaAppReviewDetailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaAppReviewDetailResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaAppReviewDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsBetaAppReviewDetailGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaAppReviewDetailGetToOneRelatedAsync($id, $fields_beta_app_review_details = null)
    {
        return $this->appsBetaAppReviewDetailGetToOneRelatedAsyncWithHttpInfo($id, $fields_beta_app_review_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsBetaAppReviewDetailGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaAppReviewDetailGetToOneRelatedAsyncWithHttpInfo($id, $fields_beta_app_review_details = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaAppReviewDetailResponse';
        $request = $this->appsBetaAppReviewDetailGetToOneRelatedRequest($id, $fields_beta_app_review_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsBetaAppReviewDetailGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsBetaAppReviewDetailGetToOneRelatedRequest($id, $fields_beta_app_review_details = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsBetaAppReviewDetailGetToOneRelated'
            );
        }

        $resourcePath = '/v1/apps/{id}/betaAppReviewDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_app_review_details)) {
            $fields_beta_app_review_details = ObjectSerializer::serializeCollection($fields_beta_app_review_details, 'csv', true);
        }
        if ($fields_beta_app_review_details !== null) {
            $queryParams['fields[betaAppReviewDetails]'] = ObjectSerializer::toQueryValue($fields_beta_app_review_details);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsBetaGroupsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaGroupsResponse
     */
    public function appsBetaGroupsGetToManyRelated($id, $fields_beta_groups = null, $limit = null)
    {
        list($response) = $this->appsBetaGroupsGetToManyRelatedWithHttpInfo($id, $fields_beta_groups, $limit);
        return $response;
    }

    /**
     * Operation appsBetaGroupsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaGroupsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsBetaGroupsGetToManyRelatedWithHttpInfo($id, $fields_beta_groups = null, $limit = null)
    {
        $request = $this->appsBetaGroupsGetToManyRelatedRequest($id, $fields_beta_groups, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaGroupsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaGroupsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaGroupsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsBetaGroupsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaGroupsGetToManyRelatedAsync($id, $fields_beta_groups = null, $limit = null)
    {
        return $this->appsBetaGroupsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_groups, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsBetaGroupsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaGroupsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_groups = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaGroupsResponse';
        $request = $this->appsBetaGroupsGetToManyRelatedRequest($id, $fields_beta_groups, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsBetaGroupsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsBetaGroupsGetToManyRelatedRequest($id, $fields_beta_groups = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsBetaGroupsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsBetaGroupsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/betaGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_groups)) {
            $fields_beta_groups = ObjectSerializer::serializeCollection($fields_beta_groups, 'csv', true);
        }
        if ($fields_beta_groups !== null) {
            $queryParams['fields[betaGroups]'] = ObjectSerializer::toQueryValue($fields_beta_groups);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsBetaLicenseAgreementGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaLicenseAgreementResponse
     */
    public function appsBetaLicenseAgreementGetToOneRelated($id, $fields_beta_license_agreements = null)
    {
        list($response) = $this->appsBetaLicenseAgreementGetToOneRelatedWithHttpInfo($id, $fields_beta_license_agreements);
        return $response;
    }

    /**
     * Operation appsBetaLicenseAgreementGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaLicenseAgreementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsBetaLicenseAgreementGetToOneRelatedWithHttpInfo($id, $fields_beta_license_agreements = null)
    {
        $request = $this->appsBetaLicenseAgreementGetToOneRelatedRequest($id, $fields_beta_license_agreements);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaLicenseAgreementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaLicenseAgreementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaLicenseAgreementResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaLicenseAgreementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsBetaLicenseAgreementGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaLicenseAgreementGetToOneRelatedAsync($id, $fields_beta_license_agreements = null)
    {
        return $this->appsBetaLicenseAgreementGetToOneRelatedAsyncWithHttpInfo($id, $fields_beta_license_agreements)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsBetaLicenseAgreementGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaLicenseAgreementGetToOneRelatedAsyncWithHttpInfo($id, $fields_beta_license_agreements = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaLicenseAgreementResponse';
        $request = $this->appsBetaLicenseAgreementGetToOneRelatedRequest($id, $fields_beta_license_agreements);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsBetaLicenseAgreementGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsBetaLicenseAgreementGetToOneRelatedRequest($id, $fields_beta_license_agreements = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsBetaLicenseAgreementGetToOneRelated'
            );
        }

        $resourcePath = '/v1/apps/{id}/betaLicenseAgreement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_license_agreements)) {
            $fields_beta_license_agreements = ObjectSerializer::serializeCollection($fields_beta_license_agreements, 'csv', true);
        }
        if ($fields_beta_license_agreements !== null) {
            $queryParams['fields[betaLicenseAgreements]'] = ObjectSerializer::toQueryValue($fields_beta_license_agreements);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsBetaTestersDeleteToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppBetaTestersLinkagesRequest $app_beta_testers_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appsBetaTestersDeleteToManyRelationship($id, $app_beta_testers_linkages_request)
    {
        $this->appsBetaTestersDeleteToManyRelationshipWithHttpInfo($id, $app_beta_testers_linkages_request);
    }

    /**
     * Operation appsBetaTestersDeleteToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppBetaTestersLinkagesRequest $app_beta_testers_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsBetaTestersDeleteToManyRelationshipWithHttpInfo($id, $app_beta_testers_linkages_request)
    {
        $request = $this->appsBetaTestersDeleteToManyRelationshipRequest($id, $app_beta_testers_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsBetaTestersDeleteToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppBetaTestersLinkagesRequest $app_beta_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaTestersDeleteToManyRelationshipAsync($id, $app_beta_testers_linkages_request)
    {
        return $this->appsBetaTestersDeleteToManyRelationshipAsyncWithHttpInfo($id, $app_beta_testers_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsBetaTestersDeleteToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppBetaTestersLinkagesRequest $app_beta_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBetaTestersDeleteToManyRelationshipAsyncWithHttpInfo($id, $app_beta_testers_linkages_request)
    {
        $returnType = '';
        $request = $this->appsBetaTestersDeleteToManyRelationshipRequest($id, $app_beta_testers_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsBetaTestersDeleteToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppBetaTestersLinkagesRequest $app_beta_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsBetaTestersDeleteToManyRelationshipRequest($id, $app_beta_testers_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsBetaTestersDeleteToManyRelationship'
            );
        }
        // verify the required parameter 'app_beta_testers_linkages_request' is set
        if ($app_beta_testers_linkages_request === null || (is_array($app_beta_testers_linkages_request) && count($app_beta_testers_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_beta_testers_linkages_request when calling appsBetaTestersDeleteToManyRelationship'
            );
        }

        $resourcePath = '/v1/apps/{id}/relationships/betaTesters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($app_beta_testers_linkages_request)) {
            $_tempBody = $app_beta_testers_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsBuildsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildsResponse
     */
    public function appsBuildsGetToManyRelated($id, $fields_builds = null, $limit = null)
    {
        list($response) = $this->appsBuildsGetToManyRelatedWithHttpInfo($id, $fields_builds, $limit);
        return $response;
    }

    /**
     * Operation appsBuildsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsBuildsGetToManyRelatedWithHttpInfo($id, $fields_builds = null, $limit = null)
    {
        $request = $this->appsBuildsGetToManyRelatedRequest($id, $fields_builds, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsBuildsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBuildsGetToManyRelatedAsync($id, $fields_builds = null, $limit = null)
    {
        return $this->appsBuildsGetToManyRelatedAsyncWithHttpInfo($id, $fields_builds, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsBuildsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsBuildsGetToManyRelatedAsyncWithHttpInfo($id, $fields_builds = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BuildsResponse';
        $request = $this->appsBuildsGetToManyRelatedRequest($id, $fields_builds, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsBuildsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsBuildsGetToManyRelatedRequest($id, $fields_builds = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsBuildsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsBuildsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsEndUserLicenseAgreementGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\EndUserLicenseAgreementResponse
     */
    public function appsEndUserLicenseAgreementGetToOneRelated($id, $fields_end_user_license_agreements = null)
    {
        list($response) = $this->appsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo($id, $fields_end_user_license_agreements);
        return $response;
    }

    /**
     * Operation appsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\EndUserLicenseAgreementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo($id, $fields_end_user_license_agreements = null)
    {
        $request = $this->appsEndUserLicenseAgreementGetToOneRelatedRequest($id, $fields_end_user_license_agreements);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\EndUserLicenseAgreementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndUserLicenseAgreementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EndUserLicenseAgreementResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndUserLicenseAgreementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsEndUserLicenseAgreementGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsEndUserLicenseAgreementGetToOneRelatedAsync($id, $fields_end_user_license_agreements = null)
    {
        return $this->appsEndUserLicenseAgreementGetToOneRelatedAsyncWithHttpInfo($id, $fields_end_user_license_agreements)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsEndUserLicenseAgreementGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsEndUserLicenseAgreementGetToOneRelatedAsyncWithHttpInfo($id, $fields_end_user_license_agreements = null)
    {
        $returnType = '\OpenAPI\Client\Model\EndUserLicenseAgreementResponse';
        $request = $this->appsEndUserLicenseAgreementGetToOneRelatedRequest($id, $fields_end_user_license_agreements);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsEndUserLicenseAgreementGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsEndUserLicenseAgreementGetToOneRelatedRequest($id, $fields_end_user_license_agreements = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsEndUserLicenseAgreementGetToOneRelated'
            );
        }

        $resourcePath = '/v1/apps/{id}/endUserLicenseAgreement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_end_user_license_agreements)) {
            $fields_end_user_license_agreements = ObjectSerializer::serializeCollection($fields_end_user_license_agreements, 'csv', true);
        }
        if ($fields_end_user_license_agreements !== null) {
            $queryParams['fields[endUserLicenseAgreements]'] = ObjectSerializer::toQueryValue($fields_end_user_license_agreements);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsGameCenterEnabledVersionsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\GameCenterEnabledVersionsResponse
     */
    public function appsGameCenterEnabledVersionsGetToManyRelated($id, $filter_platform = null, $filter_version_string = null, $filter_id = null, $sort = null, $fields_game_center_enabled_versions = null, $fields_apps = null, $limit = null, $include = null)
    {
        list($response) = $this->appsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo($id, $filter_platform, $filter_version_string, $filter_id, $sort, $fields_game_center_enabled_versions, $fields_apps, $limit, $include);
        return $response;
    }

    /**
     * Operation appsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\GameCenterEnabledVersionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo($id, $filter_platform = null, $filter_version_string = null, $filter_id = null, $sort = null, $fields_game_center_enabled_versions = null, $fields_apps = null, $limit = null, $include = null)
    {
        $request = $this->appsGameCenterEnabledVersionsGetToManyRelatedRequest($id, $filter_platform, $filter_version_string, $filter_id, $sort, $fields_game_center_enabled_versions, $fields_apps, $limit, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\GameCenterEnabledVersionsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GameCenterEnabledVersionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GameCenterEnabledVersionsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GameCenterEnabledVersionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsGameCenterEnabledVersionsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsGameCenterEnabledVersionsGetToManyRelatedAsync($id, $filter_platform = null, $filter_version_string = null, $filter_id = null, $sort = null, $fields_game_center_enabled_versions = null, $fields_apps = null, $limit = null, $include = null)
    {
        return $this->appsGameCenterEnabledVersionsGetToManyRelatedAsyncWithHttpInfo($id, $filter_platform, $filter_version_string, $filter_id, $sort, $fields_game_center_enabled_versions, $fields_apps, $limit, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsGameCenterEnabledVersionsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsGameCenterEnabledVersionsGetToManyRelatedAsyncWithHttpInfo($id, $filter_platform = null, $filter_version_string = null, $filter_id = null, $sort = null, $fields_game_center_enabled_versions = null, $fields_apps = null, $limit = null, $include = null)
    {
        $returnType = '\OpenAPI\Client\Model\GameCenterEnabledVersionsResponse';
        $request = $this->appsGameCenterEnabledVersionsGetToManyRelatedRequest($id, $filter_platform, $filter_version_string, $filter_id, $sort, $fields_game_center_enabled_versions, $fields_apps, $limit, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsGameCenterEnabledVersionsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_version_string filter by attribute &#39;versionString&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsGameCenterEnabledVersionsGetToManyRelatedRequest($id, $filter_platform = null, $filter_version_string = null, $filter_id = null, $sort = null, $fields_game_center_enabled_versions = null, $fields_apps = null, $limit = null, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsGameCenterEnabledVersionsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsGameCenterEnabledVersionsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/gameCenterEnabledVersions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_platform)) {
            $filter_platform = ObjectSerializer::serializeCollection($filter_platform, 'csv', true);
        }
        if ($filter_platform !== null) {
            $queryParams['filter[platform]'] = ObjectSerializer::toQueryValue($filter_platform);
        }
        // query params
        if (is_array($filter_version_string)) {
            $filter_version_string = ObjectSerializer::serializeCollection($filter_version_string, 'csv', true);
        }
        if ($filter_version_string !== null) {
            $queryParams['filter[versionString]'] = ObjectSerializer::toQueryValue($filter_version_string);
        }
        // query params
        if (is_array($filter_id)) {
            $filter_id = ObjectSerializer::serializeCollection($filter_id, 'csv', true);
        }
        if ($filter_id !== null) {
            $queryParams['filter[id]'] = ObjectSerializer::toQueryValue($filter_id);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if (is_array($fields_game_center_enabled_versions)) {
            $fields_game_center_enabled_versions = ObjectSerializer::serializeCollection($fields_game_center_enabled_versions, 'csv', true);
        }
        if ($fields_game_center_enabled_versions !== null) {
            $queryParams['fields[gameCenterEnabledVersions]'] = ObjectSerializer::toQueryValue($fields_game_center_enabled_versions);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsGetCollection
     *
     * @param  string[] $filter_app_store_versions_app_store_state filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param  string[] $filter_app_store_versions_platform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param  string[] $filter_bundle_id filter by attribute &#39;bundleId&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_sku filter by attribute &#39;sku&#39; (optional)
     * @param  string[] $filter_app_store_versions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $exists_game_center_enabled_versions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppsResponse
     */
    public function appsGetCollection($filter_app_store_versions_app_store_state = null, $filter_app_store_versions_platform = null, $filter_bundle_id = null, $filter_name = null, $filter_sku = null, $filter_app_store_versions = null, $filter_id = null, $exists_game_center_enabled_versions = null, $sort = null, $fields_apps = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        list($response) = $this->appsGetCollectionWithHttpInfo($filter_app_store_versions_app_store_state, $filter_app_store_versions_platform, $filter_bundle_id, $filter_name, $filter_sku, $filter_app_store_versions, $filter_id, $exists_game_center_enabled_versions, $sort, $fields_apps, $limit, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices);
        return $response;
    }

    /**
     * Operation appsGetCollectionWithHttpInfo
     *
     * @param  string[] $filter_app_store_versions_app_store_state filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param  string[] $filter_app_store_versions_platform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param  string[] $filter_bundle_id filter by attribute &#39;bundleId&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_sku filter by attribute &#39;sku&#39; (optional)
     * @param  string[] $filter_app_store_versions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $exists_game_center_enabled_versions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsGetCollectionWithHttpInfo($filter_app_store_versions_app_store_state = null, $filter_app_store_versions_platform = null, $filter_bundle_id = null, $filter_name = null, $filter_sku = null, $filter_app_store_versions = null, $filter_id = null, $exists_game_center_enabled_versions = null, $sort = null, $fields_apps = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        $request = $this->appsGetCollectionRequest($filter_app_store_versions_app_store_state, $filter_app_store_versions_platform, $filter_bundle_id, $filter_name, $filter_sku, $filter_app_store_versions, $filter_id, $exists_game_center_enabled_versions, $sort, $fields_apps, $limit, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsGetCollectionAsync
     *
     * 
     *
     * @param  string[] $filter_app_store_versions_app_store_state filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param  string[] $filter_app_store_versions_platform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param  string[] $filter_bundle_id filter by attribute &#39;bundleId&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_sku filter by attribute &#39;sku&#39; (optional)
     * @param  string[] $filter_app_store_versions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $exists_game_center_enabled_versions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsGetCollectionAsync($filter_app_store_versions_app_store_state = null, $filter_app_store_versions_platform = null, $filter_bundle_id = null, $filter_name = null, $filter_sku = null, $filter_app_store_versions = null, $filter_id = null, $exists_game_center_enabled_versions = null, $sort = null, $fields_apps = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        return $this->appsGetCollectionAsyncWithHttpInfo($filter_app_store_versions_app_store_state, $filter_app_store_versions_platform, $filter_bundle_id, $filter_name, $filter_sku, $filter_app_store_versions, $filter_id, $exists_game_center_enabled_versions, $sort, $fields_apps, $limit, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsGetCollectionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $filter_app_store_versions_app_store_state filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param  string[] $filter_app_store_versions_platform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param  string[] $filter_bundle_id filter by attribute &#39;bundleId&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_sku filter by attribute &#39;sku&#39; (optional)
     * @param  string[] $filter_app_store_versions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $exists_game_center_enabled_versions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsGetCollectionAsyncWithHttpInfo($filter_app_store_versions_app_store_state = null, $filter_app_store_versions_platform = null, $filter_bundle_id = null, $filter_name = null, $filter_sku = null, $filter_app_store_versions = null, $filter_id = null, $exists_game_center_enabled_versions = null, $sort = null, $fields_apps = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppsResponse';
        $request = $this->appsGetCollectionRequest($filter_app_store_versions_app_store_state, $filter_app_store_versions_platform, $filter_bundle_id, $filter_name, $filter_sku, $filter_app_store_versions, $filter_id, $exists_game_center_enabled_versions, $sort, $fields_apps, $limit, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsGetCollection'
     *
     * @param  string[] $filter_app_store_versions_app_store_state filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param  string[] $filter_app_store_versions_platform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param  string[] $filter_bundle_id filter by attribute &#39;bundleId&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_sku filter by attribute &#39;sku&#39; (optional)
     * @param  string[] $filter_app_store_versions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $exists_game_center_enabled_versions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsGetCollectionRequest($filter_app_store_versions_app_store_state = null, $filter_app_store_versions_platform = null, $filter_bundle_id = null, $filter_name = null, $filter_sku = null, $filter_app_store_versions = null, $filter_id = null, $exists_game_center_enabled_versions = null, $sort = null, $fields_apps = null, $limit = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsGetCollection, must be smaller than or equal to 200.');
        }

        if ($limit_app_infos !== null && $limit_app_infos > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_app_infos" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_app_store_versions !== null && $limit_app_store_versions > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_app_store_versions" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_available_territories !== null && $limit_available_territories > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_available_territories" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_beta_app_localizations !== null && $limit_beta_app_localizations > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_app_localizations" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_beta_groups !== null && $limit_beta_groups > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_groups" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_builds !== null && $limit_builds > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_builds" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_game_center_enabled_versions !== null && $limit_game_center_enabled_versions > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_game_center_enabled_versions" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_in_app_purchases !== null && $limit_in_app_purchases > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_in_app_purchases" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_pre_release_versions !== null && $limit_pre_release_versions > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_pre_release_versions" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_prices !== null && $limit_prices > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_prices" when calling AppsApi.appsGetCollection, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/apps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_app_store_versions_app_store_state)) {
            $filter_app_store_versions_app_store_state = ObjectSerializer::serializeCollection($filter_app_store_versions_app_store_state, 'csv', true);
        }
        if ($filter_app_store_versions_app_store_state !== null) {
            $queryParams['filter[appStoreVersions.appStoreState]'] = ObjectSerializer::toQueryValue($filter_app_store_versions_app_store_state);
        }
        // query params
        if (is_array($filter_app_store_versions_platform)) {
            $filter_app_store_versions_platform = ObjectSerializer::serializeCollection($filter_app_store_versions_platform, 'csv', true);
        }
        if ($filter_app_store_versions_platform !== null) {
            $queryParams['filter[appStoreVersions.platform]'] = ObjectSerializer::toQueryValue($filter_app_store_versions_platform);
        }
        // query params
        if (is_array($filter_bundle_id)) {
            $filter_bundle_id = ObjectSerializer::serializeCollection($filter_bundle_id, 'csv', true);
        }
        if ($filter_bundle_id !== null) {
            $queryParams['filter[bundleId]'] = ObjectSerializer::toQueryValue($filter_bundle_id);
        }
        // query params
        if (is_array($filter_name)) {
            $filter_name = ObjectSerializer::serializeCollection($filter_name, 'csv', true);
        }
        if ($filter_name !== null) {
            $queryParams['filter[name]'] = ObjectSerializer::toQueryValue($filter_name);
        }
        // query params
        if (is_array($filter_sku)) {
            $filter_sku = ObjectSerializer::serializeCollection($filter_sku, 'csv', true);
        }
        if ($filter_sku !== null) {
            $queryParams['filter[sku]'] = ObjectSerializer::toQueryValue($filter_sku);
        }
        // query params
        if (is_array($filter_app_store_versions)) {
            $filter_app_store_versions = ObjectSerializer::serializeCollection($filter_app_store_versions, 'csv', true);
        }
        if ($filter_app_store_versions !== null) {
            $queryParams['filter[appStoreVersions]'] = ObjectSerializer::toQueryValue($filter_app_store_versions);
        }
        // query params
        if (is_array($filter_id)) {
            $filter_id = ObjectSerializer::serializeCollection($filter_id, 'csv', true);
        }
        if ($filter_id !== null) {
            $queryParams['filter[id]'] = ObjectSerializer::toQueryValue($filter_id);
        }
        // query params
        if (is_array($exists_game_center_enabled_versions)) {
            $exists_game_center_enabled_versions = ObjectSerializer::serializeCollection($exists_game_center_enabled_versions, 'csv', true);
        }
        if ($exists_game_center_enabled_versions !== null) {
            $queryParams['exists[gameCenterEnabledVersions]'] = ObjectSerializer::toQueryValue($exists_game_center_enabled_versions);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_beta_groups)) {
            $fields_beta_groups = ObjectSerializer::serializeCollection($fields_beta_groups, 'csv', true);
        }
        if ($fields_beta_groups !== null) {
            $queryParams['fields[betaGroups]'] = ObjectSerializer::toQueryValue($fields_beta_groups);
        }
        // query params
        if (is_array($fields_perf_power_metrics)) {
            $fields_perf_power_metrics = ObjectSerializer::serializeCollection($fields_perf_power_metrics, 'csv', true);
        }
        if ($fields_perf_power_metrics !== null) {
            $queryParams['fields[perfPowerMetrics]'] = ObjectSerializer::toQueryValue($fields_perf_power_metrics);
        }
        // query params
        if (is_array($fields_app_infos)) {
            $fields_app_infos = ObjectSerializer::serializeCollection($fields_app_infos, 'csv', true);
        }
        if ($fields_app_infos !== null) {
            $queryParams['fields[appInfos]'] = ObjectSerializer::toQueryValue($fields_app_infos);
        }
        // query params
        if (is_array($fields_app_pre_orders)) {
            $fields_app_pre_orders = ObjectSerializer::serializeCollection($fields_app_pre_orders, 'csv', true);
        }
        if ($fields_app_pre_orders !== null) {
            $queryParams['fields[appPreOrders]'] = ObjectSerializer::toQueryValue($fields_app_pre_orders);
        }
        // query params
        if (is_array($fields_pre_release_versions)) {
            $fields_pre_release_versions = ObjectSerializer::serializeCollection($fields_pre_release_versions, 'csv', true);
        }
        if ($fields_pre_release_versions !== null) {
            $queryParams['fields[preReleaseVersions]'] = ObjectSerializer::toQueryValue($fields_pre_release_versions);
        }
        // query params
        if (is_array($fields_app_prices)) {
            $fields_app_prices = ObjectSerializer::serializeCollection($fields_app_prices, 'csv', true);
        }
        if ($fields_app_prices !== null) {
            $queryParams['fields[appPrices]'] = ObjectSerializer::toQueryValue($fields_app_prices);
        }
        // query params
        if (is_array($fields_in_app_purchases)) {
            $fields_in_app_purchases = ObjectSerializer::serializeCollection($fields_in_app_purchases, 'csv', true);
        }
        if ($fields_in_app_purchases !== null) {
            $queryParams['fields[inAppPurchases]'] = ObjectSerializer::toQueryValue($fields_in_app_purchases);
        }
        // query params
        if (is_array($fields_beta_app_review_details)) {
            $fields_beta_app_review_details = ObjectSerializer::serializeCollection($fields_beta_app_review_details, 'csv', true);
        }
        if ($fields_beta_app_review_details !== null) {
            $queryParams['fields[betaAppReviewDetails]'] = ObjectSerializer::toQueryValue($fields_beta_app_review_details);
        }
        // query params
        if (is_array($fields_territories)) {
            $fields_territories = ObjectSerializer::serializeCollection($fields_territories, 'csv', true);
        }
        if ($fields_territories !== null) {
            $queryParams['fields[territories]'] = ObjectSerializer::toQueryValue($fields_territories);
        }
        // query params
        if (is_array($fields_game_center_enabled_versions)) {
            $fields_game_center_enabled_versions = ObjectSerializer::serializeCollection($fields_game_center_enabled_versions, 'csv', true);
        }
        if ($fields_game_center_enabled_versions !== null) {
            $queryParams['fields[gameCenterEnabledVersions]'] = ObjectSerializer::toQueryValue($fields_game_center_enabled_versions);
        }
        // query params
        if (is_array($fields_app_store_versions)) {
            $fields_app_store_versions = ObjectSerializer::serializeCollection($fields_app_store_versions, 'csv', true);
        }
        if ($fields_app_store_versions !== null) {
            $queryParams['fields[appStoreVersions]'] = ObjectSerializer::toQueryValue($fields_app_store_versions);
        }
        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if (is_array($fields_beta_app_localizations)) {
            $fields_beta_app_localizations = ObjectSerializer::serializeCollection($fields_beta_app_localizations, 'csv', true);
        }
        if ($fields_beta_app_localizations !== null) {
            $queryParams['fields[betaAppLocalizations]'] = ObjectSerializer::toQueryValue($fields_beta_app_localizations);
        }
        // query params
        if (is_array($fields_beta_license_agreements)) {
            $fields_beta_license_agreements = ObjectSerializer::serializeCollection($fields_beta_license_agreements, 'csv', true);
        }
        if ($fields_beta_license_agreements !== null) {
            $queryParams['fields[betaLicenseAgreements]'] = ObjectSerializer::toQueryValue($fields_beta_license_agreements);
        }
        // query params
        if (is_array($fields_end_user_license_agreements)) {
            $fields_end_user_license_agreements = ObjectSerializer::serializeCollection($fields_end_user_license_agreements, 'csv', true);
        }
        if ($fields_end_user_license_agreements !== null) {
            $queryParams['fields[endUserLicenseAgreements]'] = ObjectSerializer::toQueryValue($fields_end_user_license_agreements);
        }
        // query params
        if ($limit_app_infos !== null) {
            $queryParams['limit[appInfos]'] = ObjectSerializer::toQueryValue($limit_app_infos);
        }
        // query params
        if ($limit_app_store_versions !== null) {
            $queryParams['limit[appStoreVersions]'] = ObjectSerializer::toQueryValue($limit_app_store_versions);
        }
        // query params
        if ($limit_available_territories !== null) {
            $queryParams['limit[availableTerritories]'] = ObjectSerializer::toQueryValue($limit_available_territories);
        }
        // query params
        if ($limit_beta_app_localizations !== null) {
            $queryParams['limit[betaAppLocalizations]'] = ObjectSerializer::toQueryValue($limit_beta_app_localizations);
        }
        // query params
        if ($limit_beta_groups !== null) {
            $queryParams['limit[betaGroups]'] = ObjectSerializer::toQueryValue($limit_beta_groups);
        }
        // query params
        if ($limit_builds !== null) {
            $queryParams['limit[builds]'] = ObjectSerializer::toQueryValue($limit_builds);
        }
        // query params
        if ($limit_game_center_enabled_versions !== null) {
            $queryParams['limit[gameCenterEnabledVersions]'] = ObjectSerializer::toQueryValue($limit_game_center_enabled_versions);
        }
        // query params
        if ($limit_in_app_purchases !== null) {
            $queryParams['limit[inAppPurchases]'] = ObjectSerializer::toQueryValue($limit_in_app_purchases);
        }
        // query params
        if ($limit_pre_release_versions !== null) {
            $queryParams['limit[preReleaseVersions]'] = ObjectSerializer::toQueryValue($limit_pre_release_versions);
        }
        // query params
        if ($limit_prices !== null) {
            $queryParams['limit[prices]'] = ObjectSerializer::toQueryValue($limit_prices);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsGetInstance
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse
     */
    public function appsGetInstance($id, $fields_apps = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        list($response) = $this->appsGetInstanceWithHttpInfo($id, $fields_apps, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices);
        return $response;
    }

    /**
     * Operation appsGetInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsGetInstanceWithHttpInfo($id, $fields_apps = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        $request = $this->appsGetInstanceRequest($id, $fields_apps, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsGetInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsGetInstanceAsync($id, $fields_apps = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        return $this->appsGetInstanceAsyncWithHttpInfo($id, $fields_apps, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsGetInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsGetInstanceAsyncWithHttpInfo($id, $fields_apps = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppResponse';
        $request = $this->appsGetInstanceRequest($id, $fields_apps, $include, $fields_beta_groups, $fields_perf_power_metrics, $fields_app_infos, $fields_app_pre_orders, $fields_pre_release_versions, $fields_app_prices, $fields_in_app_purchases, $fields_beta_app_review_details, $fields_territories, $fields_game_center_enabled_versions, $fields_app_store_versions, $fields_builds, $fields_beta_app_localizations, $fields_beta_license_agreements, $fields_end_user_license_agreements, $limit_app_infos, $limit_app_store_versions, $limit_available_territories, $limit_beta_app_localizations, $limit_beta_groups, $limit_builds, $limit_game_center_enabled_versions, $limit_in_app_purchases, $limit_pre_release_versions, $limit_prices);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsGetInstance'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_beta_groups the fields to include for returned resources of type betaGroups (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_app_infos the fields to include for returned resources of type appInfos (optional)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_beta_app_review_details the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param  string[] $fields_territories the fields to include for returned resources of type territories (optional)
     * @param  string[] $fields_game_center_enabled_versions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $fields_beta_app_localizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param  string[] $fields_beta_license_agreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param  string[] $fields_end_user_license_agreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param  int $limit_app_infos maximum number of related appInfos returned (when they are included) (optional)
     * @param  int $limit_app_store_versions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param  int $limit_available_territories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param  int $limit_beta_app_localizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param  int $limit_beta_groups maximum number of related betaGroups returned (when they are included) (optional)
     * @param  int $limit_builds maximum number of related builds returned (when they are included) (optional)
     * @param  int $limit_game_center_enabled_versions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param  int $limit_in_app_purchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param  int $limit_pre_release_versions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param  int $limit_prices maximum number of related prices returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsGetInstanceRequest($id, $fields_apps = null, $include = null, $fields_beta_groups = null, $fields_perf_power_metrics = null, $fields_app_infos = null, $fields_app_pre_orders = null, $fields_pre_release_versions = null, $fields_app_prices = null, $fields_in_app_purchases = null, $fields_beta_app_review_details = null, $fields_territories = null, $fields_game_center_enabled_versions = null, $fields_app_store_versions = null, $fields_builds = null, $fields_beta_app_localizations = null, $fields_beta_license_agreements = null, $fields_end_user_license_agreements = null, $limit_app_infos = null, $limit_app_store_versions = null, $limit_available_territories = null, $limit_beta_app_localizations = null, $limit_beta_groups = null, $limit_builds = null, $limit_game_center_enabled_versions = null, $limit_in_app_purchases = null, $limit_pre_release_versions = null, $limit_prices = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsGetInstance'
            );
        }
        if ($limit_app_infos !== null && $limit_app_infos > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_app_infos" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_app_store_versions !== null && $limit_app_store_versions > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_app_store_versions" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_available_territories !== null && $limit_available_territories > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_available_territories" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_beta_app_localizations !== null && $limit_beta_app_localizations > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_app_localizations" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_beta_groups !== null && $limit_beta_groups > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_groups" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_builds !== null && $limit_builds > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_builds" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_game_center_enabled_versions !== null && $limit_game_center_enabled_versions > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_game_center_enabled_versions" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_in_app_purchases !== null && $limit_in_app_purchases > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_in_app_purchases" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_pre_release_versions !== null && $limit_pre_release_versions > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_pre_release_versions" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_prices !== null && $limit_prices > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_prices" when calling AppsApi.appsGetInstance, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/apps/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_beta_groups)) {
            $fields_beta_groups = ObjectSerializer::serializeCollection($fields_beta_groups, 'csv', true);
        }
        if ($fields_beta_groups !== null) {
            $queryParams['fields[betaGroups]'] = ObjectSerializer::toQueryValue($fields_beta_groups);
        }
        // query params
        if (is_array($fields_perf_power_metrics)) {
            $fields_perf_power_metrics = ObjectSerializer::serializeCollection($fields_perf_power_metrics, 'csv', true);
        }
        if ($fields_perf_power_metrics !== null) {
            $queryParams['fields[perfPowerMetrics]'] = ObjectSerializer::toQueryValue($fields_perf_power_metrics);
        }
        // query params
        if (is_array($fields_app_infos)) {
            $fields_app_infos = ObjectSerializer::serializeCollection($fields_app_infos, 'csv', true);
        }
        if ($fields_app_infos !== null) {
            $queryParams['fields[appInfos]'] = ObjectSerializer::toQueryValue($fields_app_infos);
        }
        // query params
        if (is_array($fields_app_pre_orders)) {
            $fields_app_pre_orders = ObjectSerializer::serializeCollection($fields_app_pre_orders, 'csv', true);
        }
        if ($fields_app_pre_orders !== null) {
            $queryParams['fields[appPreOrders]'] = ObjectSerializer::toQueryValue($fields_app_pre_orders);
        }
        // query params
        if (is_array($fields_pre_release_versions)) {
            $fields_pre_release_versions = ObjectSerializer::serializeCollection($fields_pre_release_versions, 'csv', true);
        }
        if ($fields_pre_release_versions !== null) {
            $queryParams['fields[preReleaseVersions]'] = ObjectSerializer::toQueryValue($fields_pre_release_versions);
        }
        // query params
        if (is_array($fields_app_prices)) {
            $fields_app_prices = ObjectSerializer::serializeCollection($fields_app_prices, 'csv', true);
        }
        if ($fields_app_prices !== null) {
            $queryParams['fields[appPrices]'] = ObjectSerializer::toQueryValue($fields_app_prices);
        }
        // query params
        if (is_array($fields_in_app_purchases)) {
            $fields_in_app_purchases = ObjectSerializer::serializeCollection($fields_in_app_purchases, 'csv', true);
        }
        if ($fields_in_app_purchases !== null) {
            $queryParams['fields[inAppPurchases]'] = ObjectSerializer::toQueryValue($fields_in_app_purchases);
        }
        // query params
        if (is_array($fields_beta_app_review_details)) {
            $fields_beta_app_review_details = ObjectSerializer::serializeCollection($fields_beta_app_review_details, 'csv', true);
        }
        if ($fields_beta_app_review_details !== null) {
            $queryParams['fields[betaAppReviewDetails]'] = ObjectSerializer::toQueryValue($fields_beta_app_review_details);
        }
        // query params
        if (is_array($fields_territories)) {
            $fields_territories = ObjectSerializer::serializeCollection($fields_territories, 'csv', true);
        }
        if ($fields_territories !== null) {
            $queryParams['fields[territories]'] = ObjectSerializer::toQueryValue($fields_territories);
        }
        // query params
        if (is_array($fields_game_center_enabled_versions)) {
            $fields_game_center_enabled_versions = ObjectSerializer::serializeCollection($fields_game_center_enabled_versions, 'csv', true);
        }
        if ($fields_game_center_enabled_versions !== null) {
            $queryParams['fields[gameCenterEnabledVersions]'] = ObjectSerializer::toQueryValue($fields_game_center_enabled_versions);
        }
        // query params
        if (is_array($fields_app_store_versions)) {
            $fields_app_store_versions = ObjectSerializer::serializeCollection($fields_app_store_versions, 'csv', true);
        }
        if ($fields_app_store_versions !== null) {
            $queryParams['fields[appStoreVersions]'] = ObjectSerializer::toQueryValue($fields_app_store_versions);
        }
        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if (is_array($fields_beta_app_localizations)) {
            $fields_beta_app_localizations = ObjectSerializer::serializeCollection($fields_beta_app_localizations, 'csv', true);
        }
        if ($fields_beta_app_localizations !== null) {
            $queryParams['fields[betaAppLocalizations]'] = ObjectSerializer::toQueryValue($fields_beta_app_localizations);
        }
        // query params
        if (is_array($fields_beta_license_agreements)) {
            $fields_beta_license_agreements = ObjectSerializer::serializeCollection($fields_beta_license_agreements, 'csv', true);
        }
        if ($fields_beta_license_agreements !== null) {
            $queryParams['fields[betaLicenseAgreements]'] = ObjectSerializer::toQueryValue($fields_beta_license_agreements);
        }
        // query params
        if (is_array($fields_end_user_license_agreements)) {
            $fields_end_user_license_agreements = ObjectSerializer::serializeCollection($fields_end_user_license_agreements, 'csv', true);
        }
        if ($fields_end_user_license_agreements !== null) {
            $queryParams['fields[endUserLicenseAgreements]'] = ObjectSerializer::toQueryValue($fields_end_user_license_agreements);
        }
        // query params
        if ($limit_app_infos !== null) {
            $queryParams['limit[appInfos]'] = ObjectSerializer::toQueryValue($limit_app_infos);
        }
        // query params
        if ($limit_app_store_versions !== null) {
            $queryParams['limit[appStoreVersions]'] = ObjectSerializer::toQueryValue($limit_app_store_versions);
        }
        // query params
        if ($limit_available_territories !== null) {
            $queryParams['limit[availableTerritories]'] = ObjectSerializer::toQueryValue($limit_available_territories);
        }
        // query params
        if ($limit_beta_app_localizations !== null) {
            $queryParams['limit[betaAppLocalizations]'] = ObjectSerializer::toQueryValue($limit_beta_app_localizations);
        }
        // query params
        if ($limit_beta_groups !== null) {
            $queryParams['limit[betaGroups]'] = ObjectSerializer::toQueryValue($limit_beta_groups);
        }
        // query params
        if ($limit_builds !== null) {
            $queryParams['limit[builds]'] = ObjectSerializer::toQueryValue($limit_builds);
        }
        // query params
        if ($limit_game_center_enabled_versions !== null) {
            $queryParams['limit[gameCenterEnabledVersions]'] = ObjectSerializer::toQueryValue($limit_game_center_enabled_versions);
        }
        // query params
        if ($limit_in_app_purchases !== null) {
            $queryParams['limit[inAppPurchases]'] = ObjectSerializer::toQueryValue($limit_in_app_purchases);
        }
        // query params
        if ($limit_pre_release_versions !== null) {
            $queryParams['limit[preReleaseVersions]'] = ObjectSerializer::toQueryValue($limit_pre_release_versions);
        }
        // query params
        if ($limit_prices !== null) {
            $queryParams['limit[prices]'] = ObjectSerializer::toQueryValue($limit_prices);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsInAppPurchasesGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_in_app_purchase_type filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param  string[] $filter_can_be_submitted filter by canBeSubmitted (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\InAppPurchasesResponse
     */
    public function appsInAppPurchasesGetToManyRelated($id, $filter_in_app_purchase_type = null, $filter_can_be_submitted = null, $sort = null, $fields_in_app_purchases = null, $fields_apps = null, $limit = null, $include = null)
    {
        list($response) = $this->appsInAppPurchasesGetToManyRelatedWithHttpInfo($id, $filter_in_app_purchase_type, $filter_can_be_submitted, $sort, $fields_in_app_purchases, $fields_apps, $limit, $include);
        return $response;
    }

    /**
     * Operation appsInAppPurchasesGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_in_app_purchase_type filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param  string[] $filter_can_be_submitted filter by canBeSubmitted (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\InAppPurchasesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsInAppPurchasesGetToManyRelatedWithHttpInfo($id, $filter_in_app_purchase_type = null, $filter_can_be_submitted = null, $sort = null, $fields_in_app_purchases = null, $fields_apps = null, $limit = null, $include = null)
    {
        $request = $this->appsInAppPurchasesGetToManyRelatedRequest($id, $filter_in_app_purchase_type, $filter_can_be_submitted, $sort, $fields_in_app_purchases, $fields_apps, $limit, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\InAppPurchasesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InAppPurchasesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InAppPurchasesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InAppPurchasesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsInAppPurchasesGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_in_app_purchase_type filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param  string[] $filter_can_be_submitted filter by canBeSubmitted (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsInAppPurchasesGetToManyRelatedAsync($id, $filter_in_app_purchase_type = null, $filter_can_be_submitted = null, $sort = null, $fields_in_app_purchases = null, $fields_apps = null, $limit = null, $include = null)
    {
        return $this->appsInAppPurchasesGetToManyRelatedAsyncWithHttpInfo($id, $filter_in_app_purchase_type, $filter_can_be_submitted, $sort, $fields_in_app_purchases, $fields_apps, $limit, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsInAppPurchasesGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_in_app_purchase_type filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param  string[] $filter_can_be_submitted filter by canBeSubmitted (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsInAppPurchasesGetToManyRelatedAsyncWithHttpInfo($id, $filter_in_app_purchase_type = null, $filter_can_be_submitted = null, $sort = null, $fields_in_app_purchases = null, $fields_apps = null, $limit = null, $include = null)
    {
        $returnType = '\OpenAPI\Client\Model\InAppPurchasesResponse';
        $request = $this->appsInAppPurchasesGetToManyRelatedRequest($id, $filter_in_app_purchase_type, $filter_can_be_submitted, $sort, $fields_in_app_purchases, $fields_apps, $limit, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsInAppPurchasesGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_in_app_purchase_type filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param  string[] $filter_can_be_submitted filter by canBeSubmitted (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_in_app_purchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsInAppPurchasesGetToManyRelatedRequest($id, $filter_in_app_purchase_type = null, $filter_can_be_submitted = null, $sort = null, $fields_in_app_purchases = null, $fields_apps = null, $limit = null, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsInAppPurchasesGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsInAppPurchasesGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/inAppPurchases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_in_app_purchase_type)) {
            $filter_in_app_purchase_type = ObjectSerializer::serializeCollection($filter_in_app_purchase_type, 'csv', true);
        }
        if ($filter_in_app_purchase_type !== null) {
            $queryParams['filter[inAppPurchaseType]'] = ObjectSerializer::toQueryValue($filter_in_app_purchase_type);
        }
        // query params
        if (is_array($filter_can_be_submitted)) {
            $filter_can_be_submitted = ObjectSerializer::serializeCollection($filter_can_be_submitted, 'csv', true);
        }
        if ($filter_can_be_submitted !== null) {
            $queryParams['filter[canBeSubmitted]'] = ObjectSerializer::toQueryValue($filter_can_be_submitted);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if (is_array($fields_in_app_purchases)) {
            $fields_in_app_purchases = ObjectSerializer::serializeCollection($fields_in_app_purchases, 'csv', true);
        }
        if ($fields_in_app_purchases !== null) {
            $queryParams['fields[inAppPurchases]'] = ObjectSerializer::toQueryValue($fields_in_app_purchases);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsPerfPowerMetricsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PerfPowerMetricsResponse
     */
    public function appsPerfPowerMetricsGetToManyRelated($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        list($response) = $this->appsPerfPowerMetricsGetToManyRelatedWithHttpInfo($id, $filter_device_type, $filter_metric_type, $filter_platform);
        return $response;
    }

    /**
     * Operation appsPerfPowerMetricsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PerfPowerMetricsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsPerfPowerMetricsGetToManyRelatedWithHttpInfo($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        $request = $this->appsPerfPowerMetricsGetToManyRelatedRequest($id, $filter_device_type, $filter_metric_type, $filter_platform);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PerfPowerMetricsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PerfPowerMetricsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PerfPowerMetricsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PerfPowerMetricsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsPerfPowerMetricsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPerfPowerMetricsGetToManyRelatedAsync($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        return $this->appsPerfPowerMetricsGetToManyRelatedAsyncWithHttpInfo($id, $filter_device_type, $filter_metric_type, $filter_platform)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsPerfPowerMetricsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPerfPowerMetricsGetToManyRelatedAsyncWithHttpInfo($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        $returnType = '\OpenAPI\Client\Model\PerfPowerMetricsResponse';
        $request = $this->appsPerfPowerMetricsGetToManyRelatedRequest($id, $filter_device_type, $filter_metric_type, $filter_platform);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsPerfPowerMetricsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsPerfPowerMetricsGetToManyRelatedRequest($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsPerfPowerMetricsGetToManyRelated'
            );
        }

        $resourcePath = '/v1/apps/{id}/perfPowerMetrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_device_type)) {
            $filter_device_type = ObjectSerializer::serializeCollection($filter_device_type, 'csv', true);
        }
        if ($filter_device_type !== null) {
            $queryParams['filter[deviceType]'] = ObjectSerializer::toQueryValue($filter_device_type);
        }
        // query params
        if (is_array($filter_metric_type)) {
            $filter_metric_type = ObjectSerializer::serializeCollection($filter_metric_type, 'csv', true);
        }
        if ($filter_metric_type !== null) {
            $queryParams['filter[metricType]'] = ObjectSerializer::toQueryValue($filter_metric_type);
        }
        // query params
        if (is_array($filter_platform)) {
            $filter_platform = ObjectSerializer::serializeCollection($filter_platform, 'csv', true);
        }
        if ($filter_platform !== null) {
            $queryParams['filter[platform]'] = ObjectSerializer::toQueryValue($filter_platform);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsPreOrderGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppPreOrderResponse
     */
    public function appsPreOrderGetToOneRelated($id, $fields_app_pre_orders = null)
    {
        list($response) = $this->appsPreOrderGetToOneRelatedWithHttpInfo($id, $fields_app_pre_orders);
        return $response;
    }

    /**
     * Operation appsPreOrderGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppPreOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsPreOrderGetToOneRelatedWithHttpInfo($id, $fields_app_pre_orders = null)
    {
        $request = $this->appsPreOrderGetToOneRelatedRequest($id, $fields_app_pre_orders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppPreOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppPreOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppPreOrderResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppPreOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsPreOrderGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPreOrderGetToOneRelatedAsync($id, $fields_app_pre_orders = null)
    {
        return $this->appsPreOrderGetToOneRelatedAsyncWithHttpInfo($id, $fields_app_pre_orders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsPreOrderGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPreOrderGetToOneRelatedAsyncWithHttpInfo($id, $fields_app_pre_orders = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppPreOrderResponse';
        $request = $this->appsPreOrderGetToOneRelatedRequest($id, $fields_app_pre_orders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsPreOrderGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_pre_orders the fields to include for returned resources of type appPreOrders (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsPreOrderGetToOneRelatedRequest($id, $fields_app_pre_orders = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsPreOrderGetToOneRelated'
            );
        }

        $resourcePath = '/v1/apps/{id}/preOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_app_pre_orders)) {
            $fields_app_pre_orders = ObjectSerializer::serializeCollection($fields_app_pre_orders, 'csv', true);
        }
        if ($fields_app_pre_orders !== null) {
            $queryParams['fields[appPreOrders]'] = ObjectSerializer::toQueryValue($fields_app_pre_orders);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsPreReleaseVersionsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PreReleaseVersionsResponse
     */
    public function appsPreReleaseVersionsGetToManyRelated($id, $fields_pre_release_versions = null, $limit = null)
    {
        list($response) = $this->appsPreReleaseVersionsGetToManyRelatedWithHttpInfo($id, $fields_pre_release_versions, $limit);
        return $response;
    }

    /**
     * Operation appsPreReleaseVersionsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PreReleaseVersionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsPreReleaseVersionsGetToManyRelatedWithHttpInfo($id, $fields_pre_release_versions = null, $limit = null)
    {
        $request = $this->appsPreReleaseVersionsGetToManyRelatedRequest($id, $fields_pre_release_versions, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PreReleaseVersionsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PreReleaseVersionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PreReleaseVersionsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PreReleaseVersionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsPreReleaseVersionsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPreReleaseVersionsGetToManyRelatedAsync($id, $fields_pre_release_versions = null, $limit = null)
    {
        return $this->appsPreReleaseVersionsGetToManyRelatedAsyncWithHttpInfo($id, $fields_pre_release_versions, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsPreReleaseVersionsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPreReleaseVersionsGetToManyRelatedAsyncWithHttpInfo($id, $fields_pre_release_versions = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\PreReleaseVersionsResponse';
        $request = $this->appsPreReleaseVersionsGetToManyRelatedRequest($id, $fields_pre_release_versions, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsPreReleaseVersionsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsPreReleaseVersionsGetToManyRelatedRequest($id, $fields_pre_release_versions = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsPreReleaseVersionsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsPreReleaseVersionsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/preReleaseVersions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_pre_release_versions)) {
            $fields_pre_release_versions = ObjectSerializer::serializeCollection($fields_pre_release_versions, 'csv', true);
        }
        if ($fields_pre_release_versions !== null) {
            $queryParams['fields[preReleaseVersions]'] = ObjectSerializer::toQueryValue($fields_pre_release_versions);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsPricesGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_app_price_tiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppPricesResponse
     */
    public function appsPricesGetToManyRelated($id, $fields_app_prices = null, $fields_app_price_tiers = null, $fields_apps = null, $limit = null, $include = null)
    {
        list($response) = $this->appsPricesGetToManyRelatedWithHttpInfo($id, $fields_app_prices, $fields_app_price_tiers, $fields_apps, $limit, $include);
        return $response;
    }

    /**
     * Operation appsPricesGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_app_price_tiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppPricesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsPricesGetToManyRelatedWithHttpInfo($id, $fields_app_prices = null, $fields_app_price_tiers = null, $fields_apps = null, $limit = null, $include = null)
    {
        $request = $this->appsPricesGetToManyRelatedRequest($id, $fields_app_prices, $fields_app_price_tiers, $fields_apps, $limit, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppPricesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppPricesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppPricesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppPricesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsPricesGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_app_price_tiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPricesGetToManyRelatedAsync($id, $fields_app_prices = null, $fields_app_price_tiers = null, $fields_apps = null, $limit = null, $include = null)
    {
        return $this->appsPricesGetToManyRelatedAsyncWithHttpInfo($id, $fields_app_prices, $fields_app_price_tiers, $fields_apps, $limit, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsPricesGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_app_price_tiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsPricesGetToManyRelatedAsyncWithHttpInfo($id, $fields_app_prices = null, $fields_app_price_tiers = null, $fields_apps = null, $limit = null, $include = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppPricesResponse';
        $request = $this->appsPricesGetToManyRelatedRequest($id, $fields_app_prices, $fields_app_price_tiers, $fields_apps, $limit, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsPricesGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_prices the fields to include for returned resources of type appPrices (optional)
     * @param  string[] $fields_app_price_tiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsPricesGetToManyRelatedRequest($id, $fields_app_prices = null, $fields_app_price_tiers = null, $fields_apps = null, $limit = null, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsPricesGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling AppsApi.appsPricesGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/apps/{id}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_app_prices)) {
            $fields_app_prices = ObjectSerializer::serializeCollection($fields_app_prices, 'csv', true);
        }
        if ($fields_app_prices !== null) {
            $queryParams['fields[appPrices]'] = ObjectSerializer::toQueryValue($fields_app_prices);
        }
        // query params
        if (is_array($fields_app_price_tiers)) {
            $fields_app_price_tiers = ObjectSerializer::serializeCollection($fields_app_price_tiers, 'csv', true);
        }
        if ($fields_app_price_tiers !== null) {
            $queryParams['fields[appPriceTiers]'] = ObjectSerializer::toQueryValue($fields_app_price_tiers);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appsUpdateInstance
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppUpdateRequest $app_update_request App representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse|\OpenAPI\Client\Model\ErrorResponse
     */
    public function appsUpdateInstance($id, $app_update_request)
    {
        list($response) = $this->appsUpdateInstanceWithHttpInfo($id, $app_update_request);
        return $response;
    }

    /**
     * Operation appsUpdateInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppUpdateRequest $app_update_request App representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsUpdateInstanceWithHttpInfo($id, $app_update_request)
    {
        $request = $this->appsUpdateInstanceRequest($id, $app_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appsUpdateInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppUpdateRequest $app_update_request App representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsUpdateInstanceAsync($id, $app_update_request)
    {
        return $this->appsUpdateInstanceAsyncWithHttpInfo($id, $app_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appsUpdateInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppUpdateRequest $app_update_request App representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appsUpdateInstanceAsyncWithHttpInfo($id, $app_update_request)
    {
        $returnType = '\OpenAPI\Client\Model\AppResponse';
        $request = $this->appsUpdateInstanceRequest($id, $app_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appsUpdateInstance'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\AppUpdateRequest $app_update_request App representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appsUpdateInstanceRequest($id, $app_update_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling appsUpdateInstance'
            );
        }
        // verify the required parameter 'app_update_request' is set
        if ($app_update_request === null || (is_array($app_update_request) && count($app_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_update_request when calling appsUpdateInstance'
            );
        }

        $resourcePath = '/v1/apps/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($app_update_request)) {
            $_tempBody = $app_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
