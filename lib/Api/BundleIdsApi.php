<?php
/**
 * BundleIdsApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BundleIdsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BundleIdsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bundleIdsAppGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse
     */
    public function bundleIdsAppGetToOneRelated($id, $fields_apps = null)
    {
        list($response) = $this->bundleIdsAppGetToOneRelatedWithHttpInfo($id, $fields_apps);
        return $response;
    }

    /**
     * Operation bundleIdsAppGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsAppGetToOneRelatedWithHttpInfo($id, $fields_apps = null)
    {
        $request = $this->bundleIdsAppGetToOneRelatedRequest($id, $fields_apps);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsAppGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsAppGetToOneRelatedAsync($id, $fields_apps = null)
    {
        return $this->bundleIdsAppGetToOneRelatedAsyncWithHttpInfo($id, $fields_apps)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsAppGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsAppGetToOneRelatedAsyncWithHttpInfo($id, $fields_apps = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppResponse';
        $request = $this->bundleIdsAppGetToOneRelatedRequest($id, $fields_apps);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsAppGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsAppGetToOneRelatedRequest($id, $fields_apps = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bundleIdsAppGetToOneRelated'
            );
        }

        $resourcePath = '/v1/bundleIds/{id}/app';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bundleIdsBundleIdCapabilitiesGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdCapabilitiesResponse
     */
    public function bundleIdsBundleIdCapabilitiesGetToManyRelated($id, $fields_bundle_id_capabilities = null, $limit = null)
    {
        list($response) = $this->bundleIdsBundleIdCapabilitiesGetToManyRelatedWithHttpInfo($id, $fields_bundle_id_capabilities, $limit);
        return $response;
    }

    /**
     * Operation bundleIdsBundleIdCapabilitiesGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdCapabilitiesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsBundleIdCapabilitiesGetToManyRelatedWithHttpInfo($id, $fields_bundle_id_capabilities = null, $limit = null)
    {
        $request = $this->bundleIdsBundleIdCapabilitiesGetToManyRelatedRequest($id, $fields_bundle_id_capabilities, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BundleIdCapabilitiesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BundleIdCapabilitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BundleIdCapabilitiesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BundleIdCapabilitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsBundleIdCapabilitiesGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsBundleIdCapabilitiesGetToManyRelatedAsync($id, $fields_bundle_id_capabilities = null, $limit = null)
    {
        return $this->bundleIdsBundleIdCapabilitiesGetToManyRelatedAsyncWithHttpInfo($id, $fields_bundle_id_capabilities, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsBundleIdCapabilitiesGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsBundleIdCapabilitiesGetToManyRelatedAsyncWithHttpInfo($id, $fields_bundle_id_capabilities = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BundleIdCapabilitiesResponse';
        $request = $this->bundleIdsBundleIdCapabilitiesGetToManyRelatedRequest($id, $fields_bundle_id_capabilities, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsBundleIdCapabilitiesGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsBundleIdCapabilitiesGetToManyRelatedRequest($id, $fields_bundle_id_capabilities = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bundleIdsBundleIdCapabilitiesGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BundleIdsApi.bundleIdsBundleIdCapabilitiesGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/bundleIds/{id}/bundleIdCapabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_bundle_id_capabilities)) {
            $fields_bundle_id_capabilities = ObjectSerializer::serializeCollection($fields_bundle_id_capabilities, 'csv', true);
        }
        if ($fields_bundle_id_capabilities !== null) {
            $queryParams['fields[bundleIdCapabilities]'] = ObjectSerializer::toQueryValue($fields_bundle_id_capabilities);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bundleIdsCreateInstance
     *
     * @param  \OpenAPI\Client\Model\BundleIdCreateRequest $bundle_id_create_request BundleId representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdResponse|\OpenAPI\Client\Model\ErrorResponse
     */
    public function bundleIdsCreateInstance($bundle_id_create_request)
    {
        list($response) = $this->bundleIdsCreateInstanceWithHttpInfo($bundle_id_create_request);
        return $response;
    }

    /**
     * Operation bundleIdsCreateInstanceWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\BundleIdCreateRequest $bundle_id_create_request BundleId representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdResponse|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsCreateInstanceWithHttpInfo($bundle_id_create_request)
    {
        $request = $this->bundleIdsCreateInstanceRequest($bundle_id_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\BundleIdResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BundleIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BundleIdResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BundleIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsCreateInstanceAsync
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\BundleIdCreateRequest $bundle_id_create_request BundleId representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsCreateInstanceAsync($bundle_id_create_request)
    {
        return $this->bundleIdsCreateInstanceAsyncWithHttpInfo($bundle_id_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsCreateInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\BundleIdCreateRequest $bundle_id_create_request BundleId representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsCreateInstanceAsyncWithHttpInfo($bundle_id_create_request)
    {
        $returnType = '\OpenAPI\Client\Model\BundleIdResponse';
        $request = $this->bundleIdsCreateInstanceRequest($bundle_id_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsCreateInstance'
     *
     * @param  \OpenAPI\Client\Model\BundleIdCreateRequest $bundle_id_create_request BundleId representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsCreateInstanceRequest($bundle_id_create_request)
    {
        // verify the required parameter 'bundle_id_create_request' is set
        if ($bundle_id_create_request === null || (is_array($bundle_id_create_request) && count($bundle_id_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bundle_id_create_request when calling bundleIdsCreateInstance'
            );
        }

        $resourcePath = '/v1/bundleIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($bundle_id_create_request)) {
            $_tempBody = $bundle_id_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bundleIdsDeleteInstance
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bundleIdsDeleteInstance($id)
    {
        $this->bundleIdsDeleteInstanceWithHttpInfo($id);
    }

    /**
     * Operation bundleIdsDeleteInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsDeleteInstanceWithHttpInfo($id)
    {
        $request = $this->bundleIdsDeleteInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsDeleteInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsDeleteInstanceAsync($id)
    {
        return $this->bundleIdsDeleteInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsDeleteInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsDeleteInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->bundleIdsDeleteInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsDeleteInstance'
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsDeleteInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bundleIdsDeleteInstance'
            );
        }

        $resourcePath = '/v1/bundleIds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bundleIdsGetCollection
     *
     * @param  string[] $filter_identifier filter by attribute &#39;identifier&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_seed_id filter by attribute &#39;seedId&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdsResponse
     */
    public function bundleIdsGetCollection($filter_identifier = null, $filter_name = null, $filter_platform = null, $filter_seed_id = null, $filter_id = null, $sort = null, $fields_bundle_ids = null, $limit = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        list($response) = $this->bundleIdsGetCollectionWithHttpInfo($filter_identifier, $filter_name, $filter_platform, $filter_seed_id, $filter_id, $sort, $fields_bundle_ids, $limit, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles);
        return $response;
    }

    /**
     * Operation bundleIdsGetCollectionWithHttpInfo
     *
     * @param  string[] $filter_identifier filter by attribute &#39;identifier&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_seed_id filter by attribute &#39;seedId&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsGetCollectionWithHttpInfo($filter_identifier = null, $filter_name = null, $filter_platform = null, $filter_seed_id = null, $filter_id = null, $sort = null, $fields_bundle_ids = null, $limit = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        $request = $this->bundleIdsGetCollectionRequest($filter_identifier, $filter_name, $filter_platform, $filter_seed_id, $filter_id, $sort, $fields_bundle_ids, $limit, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BundleIdsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BundleIdsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BundleIdsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BundleIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsGetCollectionAsync
     *
     * 
     *
     * @param  string[] $filter_identifier filter by attribute &#39;identifier&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_seed_id filter by attribute &#39;seedId&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsGetCollectionAsync($filter_identifier = null, $filter_name = null, $filter_platform = null, $filter_seed_id = null, $filter_id = null, $sort = null, $fields_bundle_ids = null, $limit = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        return $this->bundleIdsGetCollectionAsyncWithHttpInfo($filter_identifier, $filter_name, $filter_platform, $filter_seed_id, $filter_id, $sort, $fields_bundle_ids, $limit, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsGetCollectionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $filter_identifier filter by attribute &#39;identifier&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_seed_id filter by attribute &#39;seedId&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsGetCollectionAsyncWithHttpInfo($filter_identifier = null, $filter_name = null, $filter_platform = null, $filter_seed_id = null, $filter_id = null, $sort = null, $fields_bundle_ids = null, $limit = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        $returnType = '\OpenAPI\Client\Model\BundleIdsResponse';
        $request = $this->bundleIdsGetCollectionRequest($filter_identifier, $filter_name, $filter_platform, $filter_seed_id, $filter_id, $sort, $fields_bundle_ids, $limit, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsGetCollection'
     *
     * @param  string[] $filter_identifier filter by attribute &#39;identifier&#39; (optional)
     * @param  string[] $filter_name filter by attribute &#39;name&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     * @param  string[] $filter_seed_id filter by attribute &#39;seedId&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsGetCollectionRequest($filter_identifier = null, $filter_name = null, $filter_platform = null, $filter_seed_id = null, $filter_id = null, $sort = null, $fields_bundle_ids = null, $limit = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BundleIdsApi.bundleIdsGetCollection, must be smaller than or equal to 200.');
        }

        if ($limit_bundle_id_capabilities !== null && $limit_bundle_id_capabilities > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_bundle_id_capabilities" when calling BundleIdsApi.bundleIdsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_profiles !== null && $limit_profiles > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_profiles" when calling BundleIdsApi.bundleIdsGetCollection, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/bundleIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_identifier)) {
            $filter_identifier = ObjectSerializer::serializeCollection($filter_identifier, 'csv', true);
        }
        if ($filter_identifier !== null) {
            $queryParams['filter[identifier]'] = ObjectSerializer::toQueryValue($filter_identifier);
        }
        // query params
        if (is_array($filter_name)) {
            $filter_name = ObjectSerializer::serializeCollection($filter_name, 'csv', true);
        }
        if ($filter_name !== null) {
            $queryParams['filter[name]'] = ObjectSerializer::toQueryValue($filter_name);
        }
        // query params
        if (is_array($filter_platform)) {
            $filter_platform = ObjectSerializer::serializeCollection($filter_platform, 'csv', true);
        }
        if ($filter_platform !== null) {
            $queryParams['filter[platform]'] = ObjectSerializer::toQueryValue($filter_platform);
        }
        // query params
        if (is_array($filter_seed_id)) {
            $filter_seed_id = ObjectSerializer::serializeCollection($filter_seed_id, 'csv', true);
        }
        if ($filter_seed_id !== null) {
            $queryParams['filter[seedId]'] = ObjectSerializer::toQueryValue($filter_seed_id);
        }
        // query params
        if (is_array($filter_id)) {
            $filter_id = ObjectSerializer::serializeCollection($filter_id, 'csv', true);
        }
        if ($filter_id !== null) {
            $queryParams['filter[id]'] = ObjectSerializer::toQueryValue($filter_id);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if (is_array($fields_bundle_ids)) {
            $fields_bundle_ids = ObjectSerializer::serializeCollection($fields_bundle_ids, 'csv', true);
        }
        if ($fields_bundle_ids !== null) {
            $queryParams['fields[bundleIds]'] = ObjectSerializer::toQueryValue($fields_bundle_ids);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_bundle_id_capabilities)) {
            $fields_bundle_id_capabilities = ObjectSerializer::serializeCollection($fields_bundle_id_capabilities, 'csv', true);
        }
        if ($fields_bundle_id_capabilities !== null) {
            $queryParams['fields[bundleIdCapabilities]'] = ObjectSerializer::toQueryValue($fields_bundle_id_capabilities);
        }
        // query params
        if (is_array($fields_profiles)) {
            $fields_profiles = ObjectSerializer::serializeCollection($fields_profiles, 'csv', true);
        }
        if ($fields_profiles !== null) {
            $queryParams['fields[profiles]'] = ObjectSerializer::toQueryValue($fields_profiles);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit_bundle_id_capabilities !== null) {
            $queryParams['limit[bundleIdCapabilities]'] = ObjectSerializer::toQueryValue($limit_bundle_id_capabilities);
        }
        // query params
        if ($limit_profiles !== null) {
            $queryParams['limit[profiles]'] = ObjectSerializer::toQueryValue($limit_profiles);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bundleIdsGetInstance
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdResponse
     */
    public function bundleIdsGetInstance($id, $fields_bundle_ids = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        list($response) = $this->bundleIdsGetInstanceWithHttpInfo($id, $fields_bundle_ids, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles);
        return $response;
    }

    /**
     * Operation bundleIdsGetInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsGetInstanceWithHttpInfo($id, $fields_bundle_ids = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        $request = $this->bundleIdsGetInstanceRequest($id, $fields_bundle_ids, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BundleIdResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BundleIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BundleIdResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BundleIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsGetInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsGetInstanceAsync($id, $fields_bundle_ids = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        return $this->bundleIdsGetInstanceAsyncWithHttpInfo($id, $fields_bundle_ids, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsGetInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsGetInstanceAsyncWithHttpInfo($id, $fields_bundle_ids = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        $returnType = '\OpenAPI\Client\Model\BundleIdResponse';
        $request = $this->bundleIdsGetInstanceRequest($id, $fields_bundle_ids, $include, $fields_bundle_id_capabilities, $fields_profiles, $fields_apps, $limit_bundle_id_capabilities, $limit_profiles);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsGetInstance'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_bundle_ids the fields to include for returned resources of type bundleIds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_bundle_id_capabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_bundle_id_capabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param  int $limit_profiles maximum number of related profiles returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsGetInstanceRequest($id, $fields_bundle_ids = null, $include = null, $fields_bundle_id_capabilities = null, $fields_profiles = null, $fields_apps = null, $limit_bundle_id_capabilities = null, $limit_profiles = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bundleIdsGetInstance'
            );
        }
        if ($limit_bundle_id_capabilities !== null && $limit_bundle_id_capabilities > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_bundle_id_capabilities" when calling BundleIdsApi.bundleIdsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_profiles !== null && $limit_profiles > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_profiles" when calling BundleIdsApi.bundleIdsGetInstance, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/bundleIds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_bundle_ids)) {
            $fields_bundle_ids = ObjectSerializer::serializeCollection($fields_bundle_ids, 'csv', true);
        }
        if ($fields_bundle_ids !== null) {
            $queryParams['fields[bundleIds]'] = ObjectSerializer::toQueryValue($fields_bundle_ids);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_bundle_id_capabilities)) {
            $fields_bundle_id_capabilities = ObjectSerializer::serializeCollection($fields_bundle_id_capabilities, 'csv', true);
        }
        if ($fields_bundle_id_capabilities !== null) {
            $queryParams['fields[bundleIdCapabilities]'] = ObjectSerializer::toQueryValue($fields_bundle_id_capabilities);
        }
        // query params
        if (is_array($fields_profiles)) {
            $fields_profiles = ObjectSerializer::serializeCollection($fields_profiles, 'csv', true);
        }
        if ($fields_profiles !== null) {
            $queryParams['fields[profiles]'] = ObjectSerializer::toQueryValue($fields_profiles);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit_bundle_id_capabilities !== null) {
            $queryParams['limit[bundleIdCapabilities]'] = ObjectSerializer::toQueryValue($limit_bundle_id_capabilities);
        }
        // query params
        if ($limit_profiles !== null) {
            $queryParams['limit[profiles]'] = ObjectSerializer::toQueryValue($limit_profiles);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bundleIdsProfilesGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ProfilesResponse
     */
    public function bundleIdsProfilesGetToManyRelated($id, $fields_profiles = null, $limit = null)
    {
        list($response) = $this->bundleIdsProfilesGetToManyRelatedWithHttpInfo($id, $fields_profiles, $limit);
        return $response;
    }

    /**
     * Operation bundleIdsProfilesGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ProfilesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsProfilesGetToManyRelatedWithHttpInfo($id, $fields_profiles = null, $limit = null)
    {
        $request = $this->bundleIdsProfilesGetToManyRelatedRequest($id, $fields_profiles, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\ProfilesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProfilesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProfilesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProfilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsProfilesGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsProfilesGetToManyRelatedAsync($id, $fields_profiles = null, $limit = null)
    {
        return $this->bundleIdsProfilesGetToManyRelatedAsyncWithHttpInfo($id, $fields_profiles, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsProfilesGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsProfilesGetToManyRelatedAsyncWithHttpInfo($id, $fields_profiles = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\ProfilesResponse';
        $request = $this->bundleIdsProfilesGetToManyRelatedRequest($id, $fields_profiles, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsProfilesGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_profiles the fields to include for returned resources of type profiles (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsProfilesGetToManyRelatedRequest($id, $fields_profiles = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bundleIdsProfilesGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BundleIdsApi.bundleIdsProfilesGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/bundleIds/{id}/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_profiles)) {
            $fields_profiles = ObjectSerializer::serializeCollection($fields_profiles, 'csv', true);
        }
        if ($fields_profiles !== null) {
            $queryParams['fields[profiles]'] = ObjectSerializer::toQueryValue($fields_profiles);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bundleIdsUpdateInstance
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BundleIdUpdateRequest $bundle_id_update_request BundleId representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdResponse|\OpenAPI\Client\Model\ErrorResponse
     */
    public function bundleIdsUpdateInstance($id, $bundle_id_update_request)
    {
        list($response) = $this->bundleIdsUpdateInstanceWithHttpInfo($id, $bundle_id_update_request);
        return $response;
    }

    /**
     * Operation bundleIdsUpdateInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BundleIdUpdateRequest $bundle_id_update_request BundleId representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BundleIdResponse|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bundleIdsUpdateInstanceWithHttpInfo($id, $bundle_id_update_request)
    {
        $request = $this->bundleIdsUpdateInstanceRequest($id, $bundle_id_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BundleIdResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BundleIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BundleIdResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BundleIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bundleIdsUpdateInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BundleIdUpdateRequest $bundle_id_update_request BundleId representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsUpdateInstanceAsync($id, $bundle_id_update_request)
    {
        return $this->bundleIdsUpdateInstanceAsyncWithHttpInfo($id, $bundle_id_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bundleIdsUpdateInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BundleIdUpdateRequest $bundle_id_update_request BundleId representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bundleIdsUpdateInstanceAsyncWithHttpInfo($id, $bundle_id_update_request)
    {
        $returnType = '\OpenAPI\Client\Model\BundleIdResponse';
        $request = $this->bundleIdsUpdateInstanceRequest($id, $bundle_id_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bundleIdsUpdateInstance'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BundleIdUpdateRequest $bundle_id_update_request BundleId representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bundleIdsUpdateInstanceRequest($id, $bundle_id_update_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bundleIdsUpdateInstance'
            );
        }
        // verify the required parameter 'bundle_id_update_request' is set
        if ($bundle_id_update_request === null || (is_array($bundle_id_update_request) && count($bundle_id_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bundle_id_update_request when calling bundleIdsUpdateInstance'
            );
        }

        $resourcePath = '/v1/bundleIds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($bundle_id_update_request)) {
            $_tempBody = $bundle_id_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
