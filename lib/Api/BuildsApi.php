<?php
/**
 * BuildsApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BuildsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BuildsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppEncryptionDeclarationResponse
     */
    public function buildsAppEncryptionDeclarationGetToOneRelated($id, $fields_app_encryption_declarations = null)
    {
        list($response) = $this->buildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo($id, $fields_app_encryption_declarations);
        return $response;
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppEncryptionDeclarationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo($id, $fields_app_encryption_declarations = null)
    {
        $request = $this->buildsAppEncryptionDeclarationGetToOneRelatedRequest($id, $fields_app_encryption_declarations);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppEncryptionDeclarationResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppEncryptionDeclarationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppEncryptionDeclarationResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppEncryptionDeclarationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppEncryptionDeclarationGetToOneRelatedAsync($id, $fields_app_encryption_declarations = null)
    {
        return $this->buildsAppEncryptionDeclarationGetToOneRelatedAsyncWithHttpInfo($id, $fields_app_encryption_declarations)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppEncryptionDeclarationGetToOneRelatedAsyncWithHttpInfo($id, $fields_app_encryption_declarations = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppEncryptionDeclarationResponse';
        $request = $this->buildsAppEncryptionDeclarationGetToOneRelatedRequest($id, $fields_app_encryption_declarations);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsAppEncryptionDeclarationGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsAppEncryptionDeclarationGetToOneRelatedRequest($id, $fields_app_encryption_declarations = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsAppEncryptionDeclarationGetToOneRelated'
            );
        }

        $resourcePath = '/v1/builds/{id}/appEncryptionDeclaration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_app_encryption_declarations)) {
            $fields_app_encryption_declarations = ObjectSerializer::serializeCollection($fields_app_encryption_declarations, 'csv', true);
        }
        if ($fields_app_encryption_declarations !== null) {
            $queryParams['fields[appEncryptionDeclarations]'] = ObjectSerializer::toQueryValue($fields_app_encryption_declarations);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelationship
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageResponse
     */
    public function buildsAppEncryptionDeclarationGetToOneRelationship($id)
    {
        list($response) = $this->buildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo($id)
    {
        $request = $this->buildsAppEncryptionDeclarationGetToOneRelationshipRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppEncryptionDeclarationGetToOneRelationshipAsync($id)
    {
        return $this->buildsAppEncryptionDeclarationGetToOneRelationshipAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsAppEncryptionDeclarationGetToOneRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppEncryptionDeclarationGetToOneRelationshipAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageResponse';
        $request = $this->buildsAppEncryptionDeclarationGetToOneRelationshipRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsAppEncryptionDeclarationGetToOneRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsAppEncryptionDeclarationGetToOneRelationshipRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsAppEncryptionDeclarationGetToOneRelationship'
            );
        }

        $resourcePath = '/v1/builds/{id}/relationships/appEncryptionDeclaration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsAppEncryptionDeclarationUpdateToOneRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageRequest $build_app_encryption_declaration_linkage_request Related linkage (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function buildsAppEncryptionDeclarationUpdateToOneRelationship($id, $build_app_encryption_declaration_linkage_request)
    {
        $this->buildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo($id, $build_app_encryption_declaration_linkage_request);
    }

    /**
     * Operation buildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageRequest $build_app_encryption_declaration_linkage_request Related linkage (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo($id, $build_app_encryption_declaration_linkage_request)
    {
        $request = $this->buildsAppEncryptionDeclarationUpdateToOneRelationshipRequest($id, $build_app_encryption_declaration_linkage_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsAppEncryptionDeclarationUpdateToOneRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageRequest $build_app_encryption_declaration_linkage_request Related linkage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppEncryptionDeclarationUpdateToOneRelationshipAsync($id, $build_app_encryption_declaration_linkage_request)
    {
        return $this->buildsAppEncryptionDeclarationUpdateToOneRelationshipAsyncWithHttpInfo($id, $build_app_encryption_declaration_linkage_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsAppEncryptionDeclarationUpdateToOneRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageRequest $build_app_encryption_declaration_linkage_request Related linkage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppEncryptionDeclarationUpdateToOneRelationshipAsyncWithHttpInfo($id, $build_app_encryption_declaration_linkage_request)
    {
        $returnType = '';
        $request = $this->buildsAppEncryptionDeclarationUpdateToOneRelationshipRequest($id, $build_app_encryption_declaration_linkage_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsAppEncryptionDeclarationUpdateToOneRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildAppEncryptionDeclarationLinkageRequest $build_app_encryption_declaration_linkage_request Related linkage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsAppEncryptionDeclarationUpdateToOneRelationshipRequest($id, $build_app_encryption_declaration_linkage_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsAppEncryptionDeclarationUpdateToOneRelationship'
            );
        }
        // verify the required parameter 'build_app_encryption_declaration_linkage_request' is set
        if ($build_app_encryption_declaration_linkage_request === null || (is_array($build_app_encryption_declaration_linkage_request) && count($build_app_encryption_declaration_linkage_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_app_encryption_declaration_linkage_request when calling buildsAppEncryptionDeclarationUpdateToOneRelationship'
            );
        }

        $resourcePath = '/v1/builds/{id}/relationships/appEncryptionDeclaration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($build_app_encryption_declaration_linkage_request)) {
            $_tempBody = $build_app_encryption_declaration_linkage_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsAppGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse
     */
    public function buildsAppGetToOneRelated($id, $fields_apps = null)
    {
        list($response) = $this->buildsAppGetToOneRelatedWithHttpInfo($id, $fields_apps);
        return $response;
    }

    /**
     * Operation buildsAppGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsAppGetToOneRelatedWithHttpInfo($id, $fields_apps = null)
    {
        $request = $this->buildsAppGetToOneRelatedRequest($id, $fields_apps);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsAppGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppGetToOneRelatedAsync($id, $fields_apps = null)
    {
        return $this->buildsAppGetToOneRelatedAsyncWithHttpInfo($id, $fields_apps)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsAppGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppGetToOneRelatedAsyncWithHttpInfo($id, $fields_apps = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppResponse';
        $request = $this->buildsAppGetToOneRelatedRequest($id, $fields_apps);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsAppGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsAppGetToOneRelatedRequest($id, $fields_apps = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsAppGetToOneRelated'
            );
        }

        $resourcePath = '/v1/builds/{id}/app';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsAppStoreVersionGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppStoreVersionResponse
     */
    public function buildsAppStoreVersionGetToOneRelated($id, $fields_app_store_versions = null)
    {
        list($response) = $this->buildsAppStoreVersionGetToOneRelatedWithHttpInfo($id, $fields_app_store_versions);
        return $response;
    }

    /**
     * Operation buildsAppStoreVersionGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\AppStoreVersionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsAppStoreVersionGetToOneRelatedWithHttpInfo($id, $fields_app_store_versions = null)
    {
        $request = $this->buildsAppStoreVersionGetToOneRelatedRequest($id, $fields_app_store_versions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AppStoreVersionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppStoreVersionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppStoreVersionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppStoreVersionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsAppStoreVersionGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppStoreVersionGetToOneRelatedAsync($id, $fields_app_store_versions = null)
    {
        return $this->buildsAppStoreVersionGetToOneRelatedAsyncWithHttpInfo($id, $fields_app_store_versions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsAppStoreVersionGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsAppStoreVersionGetToOneRelatedAsyncWithHttpInfo($id, $fields_app_store_versions = null)
    {
        $returnType = '\OpenAPI\Client\Model\AppStoreVersionResponse';
        $request = $this->buildsAppStoreVersionGetToOneRelatedRequest($id, $fields_app_store_versions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsAppStoreVersionGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsAppStoreVersionGetToOneRelatedRequest($id, $fields_app_store_versions = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsAppStoreVersionGetToOneRelated'
            );
        }

        $resourcePath = '/v1/builds/{id}/appStoreVersion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_app_store_versions)) {
            $fields_app_store_versions = ObjectSerializer::serializeCollection($fields_app_store_versions, 'csv', true);
        }
        if ($fields_app_store_versions !== null) {
            $queryParams['fields[appStoreVersions]'] = ObjectSerializer::toQueryValue($fields_app_store_versions);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsBetaAppReviewSubmissionGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaAppReviewSubmissionResponse
     */
    public function buildsBetaAppReviewSubmissionGetToOneRelated($id, $fields_beta_app_review_submissions = null)
    {
        list($response) = $this->buildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo($id, $fields_beta_app_review_submissions);
        return $response;
    }

    /**
     * Operation buildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaAppReviewSubmissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo($id, $fields_beta_app_review_submissions = null)
    {
        $request = $this->buildsBetaAppReviewSubmissionGetToOneRelatedRequest($id, $fields_beta_app_review_submissions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaAppReviewSubmissionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaAppReviewSubmissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaAppReviewSubmissionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaAppReviewSubmissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsBetaAppReviewSubmissionGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaAppReviewSubmissionGetToOneRelatedAsync($id, $fields_beta_app_review_submissions = null)
    {
        return $this->buildsBetaAppReviewSubmissionGetToOneRelatedAsyncWithHttpInfo($id, $fields_beta_app_review_submissions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsBetaAppReviewSubmissionGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaAppReviewSubmissionGetToOneRelatedAsyncWithHttpInfo($id, $fields_beta_app_review_submissions = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaAppReviewSubmissionResponse';
        $request = $this->buildsBetaAppReviewSubmissionGetToOneRelatedRequest($id, $fields_beta_app_review_submissions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsBetaAppReviewSubmissionGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsBetaAppReviewSubmissionGetToOneRelatedRequest($id, $fields_beta_app_review_submissions = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsBetaAppReviewSubmissionGetToOneRelated'
            );
        }

        $resourcePath = '/v1/builds/{id}/betaAppReviewSubmission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_app_review_submissions)) {
            $fields_beta_app_review_submissions = ObjectSerializer::serializeCollection($fields_beta_app_review_submissions, 'csv', true);
        }
        if ($fields_beta_app_review_submissions !== null) {
            $queryParams['fields[betaAppReviewSubmissions]'] = ObjectSerializer::toQueryValue($fields_beta_app_review_submissions);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsBetaBuildLocalizationsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaBuildLocalizationsResponse
     */
    public function buildsBetaBuildLocalizationsGetToManyRelated($id, $fields_beta_build_localizations = null, $limit = null)
    {
        list($response) = $this->buildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo($id, $fields_beta_build_localizations, $limit);
        return $response;
    }

    /**
     * Operation buildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaBuildLocalizationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo($id, $fields_beta_build_localizations = null, $limit = null)
    {
        $request = $this->buildsBetaBuildLocalizationsGetToManyRelatedRequest($id, $fields_beta_build_localizations, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaBuildLocalizationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaBuildLocalizationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaBuildLocalizationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaBuildLocalizationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsBetaBuildLocalizationsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaBuildLocalizationsGetToManyRelatedAsync($id, $fields_beta_build_localizations = null, $limit = null)
    {
        return $this->buildsBetaBuildLocalizationsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_build_localizations, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsBetaBuildLocalizationsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaBuildLocalizationsGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_build_localizations = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaBuildLocalizationsResponse';
        $request = $this->buildsBetaBuildLocalizationsGetToManyRelatedRequest($id, $fields_beta_build_localizations, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsBetaBuildLocalizationsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsBetaBuildLocalizationsGetToManyRelatedRequest($id, $fields_beta_build_localizations = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsBetaBuildLocalizationsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BuildsApi.buildsBetaBuildLocalizationsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/builds/{id}/betaBuildLocalizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_build_localizations)) {
            $fields_beta_build_localizations = ObjectSerializer::serializeCollection($fields_beta_build_localizations, 'csv', true);
        }
        if ($fields_beta_build_localizations !== null) {
            $queryParams['fields[betaBuildLocalizations]'] = ObjectSerializer::toQueryValue($fields_beta_build_localizations);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsBetaGroupsCreateToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function buildsBetaGroupsCreateToManyRelationship($id, $build_beta_groups_linkages_request)
    {
        $this->buildsBetaGroupsCreateToManyRelationshipWithHttpInfo($id, $build_beta_groups_linkages_request);
    }

    /**
     * Operation buildsBetaGroupsCreateToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsBetaGroupsCreateToManyRelationshipWithHttpInfo($id, $build_beta_groups_linkages_request)
    {
        $request = $this->buildsBetaGroupsCreateToManyRelationshipRequest($id, $build_beta_groups_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsBetaGroupsCreateToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaGroupsCreateToManyRelationshipAsync($id, $build_beta_groups_linkages_request)
    {
        return $this->buildsBetaGroupsCreateToManyRelationshipAsyncWithHttpInfo($id, $build_beta_groups_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsBetaGroupsCreateToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaGroupsCreateToManyRelationshipAsyncWithHttpInfo($id, $build_beta_groups_linkages_request)
    {
        $returnType = '';
        $request = $this->buildsBetaGroupsCreateToManyRelationshipRequest($id, $build_beta_groups_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsBetaGroupsCreateToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsBetaGroupsCreateToManyRelationshipRequest($id, $build_beta_groups_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsBetaGroupsCreateToManyRelationship'
            );
        }
        // verify the required parameter 'build_beta_groups_linkages_request' is set
        if ($build_beta_groups_linkages_request === null || (is_array($build_beta_groups_linkages_request) && count($build_beta_groups_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_beta_groups_linkages_request when calling buildsBetaGroupsCreateToManyRelationship'
            );
        }

        $resourcePath = '/v1/builds/{id}/relationships/betaGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($build_beta_groups_linkages_request)) {
            $_tempBody = $build_beta_groups_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsBetaGroupsDeleteToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function buildsBetaGroupsDeleteToManyRelationship($id, $build_beta_groups_linkages_request)
    {
        $this->buildsBetaGroupsDeleteToManyRelationshipWithHttpInfo($id, $build_beta_groups_linkages_request);
    }

    /**
     * Operation buildsBetaGroupsDeleteToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsBetaGroupsDeleteToManyRelationshipWithHttpInfo($id, $build_beta_groups_linkages_request)
    {
        $request = $this->buildsBetaGroupsDeleteToManyRelationshipRequest($id, $build_beta_groups_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsBetaGroupsDeleteToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaGroupsDeleteToManyRelationshipAsync($id, $build_beta_groups_linkages_request)
    {
        return $this->buildsBetaGroupsDeleteToManyRelationshipAsyncWithHttpInfo($id, $build_beta_groups_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsBetaGroupsDeleteToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBetaGroupsDeleteToManyRelationshipAsyncWithHttpInfo($id, $build_beta_groups_linkages_request)
    {
        $returnType = '';
        $request = $this->buildsBetaGroupsDeleteToManyRelationshipRequest($id, $build_beta_groups_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsBetaGroupsDeleteToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildBetaGroupsLinkagesRequest $build_beta_groups_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsBetaGroupsDeleteToManyRelationshipRequest($id, $build_beta_groups_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsBetaGroupsDeleteToManyRelationship'
            );
        }
        // verify the required parameter 'build_beta_groups_linkages_request' is set
        if ($build_beta_groups_linkages_request === null || (is_array($build_beta_groups_linkages_request) && count($build_beta_groups_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_beta_groups_linkages_request when calling buildsBetaGroupsDeleteToManyRelationship'
            );
        }

        $resourcePath = '/v1/builds/{id}/relationships/betaGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($build_beta_groups_linkages_request)) {
            $_tempBody = $build_beta_groups_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsBuildBetaDetailGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildBetaDetailResponse
     */
    public function buildsBuildBetaDetailGetToOneRelated($id, $fields_build_beta_details = null)
    {
        list($response) = $this->buildsBuildBetaDetailGetToOneRelatedWithHttpInfo($id, $fields_build_beta_details);
        return $response;
    }

    /**
     * Operation buildsBuildBetaDetailGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildBetaDetailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsBuildBetaDetailGetToOneRelatedWithHttpInfo($id, $fields_build_beta_details = null)
    {
        $request = $this->buildsBuildBetaDetailGetToOneRelatedRequest($id, $fields_build_beta_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildBetaDetailResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildBetaDetailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildBetaDetailResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildBetaDetailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsBuildBetaDetailGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBuildBetaDetailGetToOneRelatedAsync($id, $fields_build_beta_details = null)
    {
        return $this->buildsBuildBetaDetailGetToOneRelatedAsyncWithHttpInfo($id, $fields_build_beta_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsBuildBetaDetailGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsBuildBetaDetailGetToOneRelatedAsyncWithHttpInfo($id, $fields_build_beta_details = null)
    {
        $returnType = '\OpenAPI\Client\Model\BuildBetaDetailResponse';
        $request = $this->buildsBuildBetaDetailGetToOneRelatedRequest($id, $fields_build_beta_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsBuildBetaDetailGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsBuildBetaDetailGetToOneRelatedRequest($id, $fields_build_beta_details = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsBuildBetaDetailGetToOneRelated'
            );
        }

        $resourcePath = '/v1/builds/{id}/buildBetaDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_build_beta_details)) {
            $fields_build_beta_details = ObjectSerializer::serializeCollection($fields_build_beta_details, 'csv', true);
        }
        if ($fields_build_beta_details !== null) {
            $queryParams['fields[buildBetaDetails]'] = ObjectSerializer::toQueryValue($fields_build_beta_details);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsDiagnosticSignaturesGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_diagnostic_type filter by attribute &#39;diagnosticType&#39; (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\DiagnosticSignaturesResponse
     */
    public function buildsDiagnosticSignaturesGetToManyRelated($id, $filter_diagnostic_type = null, $fields_diagnostic_signatures = null, $limit = null)
    {
        list($response) = $this->buildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo($id, $filter_diagnostic_type, $fields_diagnostic_signatures, $limit);
        return $response;
    }

    /**
     * Operation buildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_diagnostic_type filter by attribute &#39;diagnosticType&#39; (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\DiagnosticSignaturesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo($id, $filter_diagnostic_type = null, $fields_diagnostic_signatures = null, $limit = null)
    {
        $request = $this->buildsDiagnosticSignaturesGetToManyRelatedRequest($id, $filter_diagnostic_type, $fields_diagnostic_signatures, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\DiagnosticSignaturesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DiagnosticSignaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DiagnosticSignaturesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DiagnosticSignaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsDiagnosticSignaturesGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_diagnostic_type filter by attribute &#39;diagnosticType&#39; (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsDiagnosticSignaturesGetToManyRelatedAsync($id, $filter_diagnostic_type = null, $fields_diagnostic_signatures = null, $limit = null)
    {
        return $this->buildsDiagnosticSignaturesGetToManyRelatedAsyncWithHttpInfo($id, $filter_diagnostic_type, $fields_diagnostic_signatures, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsDiagnosticSignaturesGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_diagnostic_type filter by attribute &#39;diagnosticType&#39; (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsDiagnosticSignaturesGetToManyRelatedAsyncWithHttpInfo($id, $filter_diagnostic_type = null, $fields_diagnostic_signatures = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\DiagnosticSignaturesResponse';
        $request = $this->buildsDiagnosticSignaturesGetToManyRelatedRequest($id, $filter_diagnostic_type, $fields_diagnostic_signatures, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsDiagnosticSignaturesGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_diagnostic_type filter by attribute &#39;diagnosticType&#39; (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsDiagnosticSignaturesGetToManyRelatedRequest($id, $filter_diagnostic_type = null, $fields_diagnostic_signatures = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsDiagnosticSignaturesGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BuildsApi.buildsDiagnosticSignaturesGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/builds/{id}/diagnosticSignatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_diagnostic_type)) {
            $filter_diagnostic_type = ObjectSerializer::serializeCollection($filter_diagnostic_type, 'csv', true);
        }
        if ($filter_diagnostic_type !== null) {
            $queryParams['filter[diagnosticType]'] = ObjectSerializer::toQueryValue($filter_diagnostic_type);
        }
        // query params
        if (is_array($fields_diagnostic_signatures)) {
            $fields_diagnostic_signatures = ObjectSerializer::serializeCollection($fields_diagnostic_signatures, 'csv', true);
        }
        if ($fields_diagnostic_signatures !== null) {
            $queryParams['fields[diagnosticSignatures]'] = ObjectSerializer::toQueryValue($fields_diagnostic_signatures);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetCollection
     *
     * @param  string[] $filter_beta_app_review_submission_beta_review_state filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param  string[] $filter_expired filter by attribute &#39;expired&#39; (optional)
     * @param  string[] $filter_pre_release_version_platform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param  string[] $filter_pre_release_version_version filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param  string[] $filter_processing_state filter by attribute &#39;processingState&#39; (optional)
     * @param  string[] $filter_uses_non_exempt_encryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param  string[] $filter_version filter by attribute &#39;version&#39; (optional)
     * @param  string[] $filter_app filter by id(s) of related &#39;app&#39; (optional)
     * @param  string[] $filter_app_store_version filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_pre_release_version filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildsResponse
     */
    public function buildsGetCollection($filter_beta_app_review_submission_beta_review_state = null, $filter_expired = null, $filter_pre_release_version_platform = null, $filter_pre_release_version_version = null, $filter_processing_state = null, $filter_uses_non_exempt_encryption = null, $filter_version = null, $filter_app = null, $filter_app_store_version = null, $filter_beta_groups = null, $filter_pre_release_version = null, $filter_id = null, $sort = null, $fields_builds = null, $limit = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        list($response) = $this->buildsGetCollectionWithHttpInfo($filter_beta_app_review_submission_beta_review_state, $filter_expired, $filter_pre_release_version_platform, $filter_pre_release_version_version, $filter_processing_state, $filter_uses_non_exempt_encryption, $filter_version, $filter_app, $filter_app_store_version, $filter_beta_groups, $filter_pre_release_version, $filter_id, $sort, $fields_builds, $limit, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers);
        return $response;
    }

    /**
     * Operation buildsGetCollectionWithHttpInfo
     *
     * @param  string[] $filter_beta_app_review_submission_beta_review_state filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param  string[] $filter_expired filter by attribute &#39;expired&#39; (optional)
     * @param  string[] $filter_pre_release_version_platform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param  string[] $filter_pre_release_version_version filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param  string[] $filter_processing_state filter by attribute &#39;processingState&#39; (optional)
     * @param  string[] $filter_uses_non_exempt_encryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param  string[] $filter_version filter by attribute &#39;version&#39; (optional)
     * @param  string[] $filter_app filter by id(s) of related &#39;app&#39; (optional)
     * @param  string[] $filter_app_store_version filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_pre_release_version filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetCollectionWithHttpInfo($filter_beta_app_review_submission_beta_review_state = null, $filter_expired = null, $filter_pre_release_version_platform = null, $filter_pre_release_version_version = null, $filter_processing_state = null, $filter_uses_non_exempt_encryption = null, $filter_version = null, $filter_app = null, $filter_app_store_version = null, $filter_beta_groups = null, $filter_pre_release_version = null, $filter_id = null, $sort = null, $fields_builds = null, $limit = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        $request = $this->buildsGetCollectionRequest($filter_beta_app_review_submission_beta_review_state, $filter_expired, $filter_pre_release_version_platform, $filter_pre_release_version_version, $filter_processing_state, $filter_uses_non_exempt_encryption, $filter_version, $filter_app, $filter_app_store_version, $filter_beta_groups, $filter_pre_release_version, $filter_id, $sort, $fields_builds, $limit, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetCollectionAsync
     *
     * 
     *
     * @param  string[] $filter_beta_app_review_submission_beta_review_state filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param  string[] $filter_expired filter by attribute &#39;expired&#39; (optional)
     * @param  string[] $filter_pre_release_version_platform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param  string[] $filter_pre_release_version_version filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param  string[] $filter_processing_state filter by attribute &#39;processingState&#39; (optional)
     * @param  string[] $filter_uses_non_exempt_encryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param  string[] $filter_version filter by attribute &#39;version&#39; (optional)
     * @param  string[] $filter_app filter by id(s) of related &#39;app&#39; (optional)
     * @param  string[] $filter_app_store_version filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_pre_release_version filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetCollectionAsync($filter_beta_app_review_submission_beta_review_state = null, $filter_expired = null, $filter_pre_release_version_platform = null, $filter_pre_release_version_version = null, $filter_processing_state = null, $filter_uses_non_exempt_encryption = null, $filter_version = null, $filter_app = null, $filter_app_store_version = null, $filter_beta_groups = null, $filter_pre_release_version = null, $filter_id = null, $sort = null, $fields_builds = null, $limit = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        return $this->buildsGetCollectionAsyncWithHttpInfo($filter_beta_app_review_submission_beta_review_state, $filter_expired, $filter_pre_release_version_platform, $filter_pre_release_version_version, $filter_processing_state, $filter_uses_non_exempt_encryption, $filter_version, $filter_app, $filter_app_store_version, $filter_beta_groups, $filter_pre_release_version, $filter_id, $sort, $fields_builds, $limit, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetCollectionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $filter_beta_app_review_submission_beta_review_state filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param  string[] $filter_expired filter by attribute &#39;expired&#39; (optional)
     * @param  string[] $filter_pre_release_version_platform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param  string[] $filter_pre_release_version_version filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param  string[] $filter_processing_state filter by attribute &#39;processingState&#39; (optional)
     * @param  string[] $filter_uses_non_exempt_encryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param  string[] $filter_version filter by attribute &#39;version&#39; (optional)
     * @param  string[] $filter_app filter by id(s) of related &#39;app&#39; (optional)
     * @param  string[] $filter_app_store_version filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_pre_release_version filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetCollectionAsyncWithHttpInfo($filter_beta_app_review_submission_beta_review_state = null, $filter_expired = null, $filter_pre_release_version_platform = null, $filter_pre_release_version_version = null, $filter_processing_state = null, $filter_uses_non_exempt_encryption = null, $filter_version = null, $filter_app = null, $filter_app_store_version = null, $filter_beta_groups = null, $filter_pre_release_version = null, $filter_id = null, $sort = null, $fields_builds = null, $limit = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        $returnType = '\OpenAPI\Client\Model\BuildsResponse';
        $request = $this->buildsGetCollectionRequest($filter_beta_app_review_submission_beta_review_state, $filter_expired, $filter_pre_release_version_platform, $filter_pre_release_version_version, $filter_processing_state, $filter_uses_non_exempt_encryption, $filter_version, $filter_app, $filter_app_store_version, $filter_beta_groups, $filter_pre_release_version, $filter_id, $sort, $fields_builds, $limit, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetCollection'
     *
     * @param  string[] $filter_beta_app_review_submission_beta_review_state filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param  string[] $filter_expired filter by attribute &#39;expired&#39; (optional)
     * @param  string[] $filter_pre_release_version_platform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param  string[] $filter_pre_release_version_version filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param  string[] $filter_processing_state filter by attribute &#39;processingState&#39; (optional)
     * @param  string[] $filter_uses_non_exempt_encryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param  string[] $filter_version filter by attribute &#39;version&#39; (optional)
     * @param  string[] $filter_app filter by id(s) of related &#39;app&#39; (optional)
     * @param  string[] $filter_app_store_version filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param  string[] $filter_beta_groups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param  string[] $filter_pre_release_version filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param  string[] $filter_id filter by id(s) (optional)
     * @param  string[] $sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  int $limit maximum resources per page (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetCollectionRequest($filter_beta_app_review_submission_beta_review_state = null, $filter_expired = null, $filter_pre_release_version_platform = null, $filter_pre_release_version_version = null, $filter_processing_state = null, $filter_uses_non_exempt_encryption = null, $filter_version = null, $filter_app = null, $filter_app_store_version = null, $filter_beta_groups = null, $filter_pre_release_version = null, $filter_id = null, $sort = null, $fields_builds = null, $limit = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BuildsApi.buildsGetCollection, must be smaller than or equal to 200.');
        }

        if ($limit_beta_build_localizations !== null && $limit_beta_build_localizations > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_build_localizations" when calling BuildsApi.buildsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_icons !== null && $limit_icons > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_icons" when calling BuildsApi.buildsGetCollection, must be smaller than or equal to 50.');
        }

        if ($limit_individual_testers !== null && $limit_individual_testers > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_individual_testers" when calling BuildsApi.buildsGetCollection, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_beta_app_review_submission_beta_review_state)) {
            $filter_beta_app_review_submission_beta_review_state = ObjectSerializer::serializeCollection($filter_beta_app_review_submission_beta_review_state, 'csv', true);
        }
        if ($filter_beta_app_review_submission_beta_review_state !== null) {
            $queryParams['filter[betaAppReviewSubmission.betaReviewState]'] = ObjectSerializer::toQueryValue($filter_beta_app_review_submission_beta_review_state);
        }
        // query params
        if (is_array($filter_expired)) {
            $filter_expired = ObjectSerializer::serializeCollection($filter_expired, 'csv', true);
        }
        if ($filter_expired !== null) {
            $queryParams['filter[expired]'] = ObjectSerializer::toQueryValue($filter_expired);
        }
        // query params
        if (is_array($filter_pre_release_version_platform)) {
            $filter_pre_release_version_platform = ObjectSerializer::serializeCollection($filter_pre_release_version_platform, 'csv', true);
        }
        if ($filter_pre_release_version_platform !== null) {
            $queryParams['filter[preReleaseVersion.platform]'] = ObjectSerializer::toQueryValue($filter_pre_release_version_platform);
        }
        // query params
        if (is_array($filter_pre_release_version_version)) {
            $filter_pre_release_version_version = ObjectSerializer::serializeCollection($filter_pre_release_version_version, 'csv', true);
        }
        if ($filter_pre_release_version_version !== null) {
            $queryParams['filter[preReleaseVersion.version]'] = ObjectSerializer::toQueryValue($filter_pre_release_version_version);
        }
        // query params
        if (is_array($filter_processing_state)) {
            $filter_processing_state = ObjectSerializer::serializeCollection($filter_processing_state, 'csv', true);
        }
        if ($filter_processing_state !== null) {
            $queryParams['filter[processingState]'] = ObjectSerializer::toQueryValue($filter_processing_state);
        }
        // query params
        if (is_array($filter_uses_non_exempt_encryption)) {
            $filter_uses_non_exempt_encryption = ObjectSerializer::serializeCollection($filter_uses_non_exempt_encryption, 'csv', true);
        }
        if ($filter_uses_non_exempt_encryption !== null) {
            $queryParams['filter[usesNonExemptEncryption]'] = ObjectSerializer::toQueryValue($filter_uses_non_exempt_encryption);
        }
        // query params
        if (is_array($filter_version)) {
            $filter_version = ObjectSerializer::serializeCollection($filter_version, 'csv', true);
        }
        if ($filter_version !== null) {
            $queryParams['filter[version]'] = ObjectSerializer::toQueryValue($filter_version);
        }
        // query params
        if (is_array($filter_app)) {
            $filter_app = ObjectSerializer::serializeCollection($filter_app, 'csv', true);
        }
        if ($filter_app !== null) {
            $queryParams['filter[app]'] = ObjectSerializer::toQueryValue($filter_app);
        }
        // query params
        if (is_array($filter_app_store_version)) {
            $filter_app_store_version = ObjectSerializer::serializeCollection($filter_app_store_version, 'csv', true);
        }
        if ($filter_app_store_version !== null) {
            $queryParams['filter[appStoreVersion]'] = ObjectSerializer::toQueryValue($filter_app_store_version);
        }
        // query params
        if (is_array($filter_beta_groups)) {
            $filter_beta_groups = ObjectSerializer::serializeCollection($filter_beta_groups, 'csv', true);
        }
        if ($filter_beta_groups !== null) {
            $queryParams['filter[betaGroups]'] = ObjectSerializer::toQueryValue($filter_beta_groups);
        }
        // query params
        if (is_array($filter_pre_release_version)) {
            $filter_pre_release_version = ObjectSerializer::serializeCollection($filter_pre_release_version, 'csv', true);
        }
        if ($filter_pre_release_version !== null) {
            $queryParams['filter[preReleaseVersion]'] = ObjectSerializer::toQueryValue($filter_pre_release_version);
        }
        // query params
        if (is_array($filter_id)) {
            $filter_id = ObjectSerializer::serializeCollection($filter_id, 'csv', true);
        }
        if ($filter_id !== null) {
            $queryParams['filter[id]'] = ObjectSerializer::toQueryValue($filter_id);
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'csv', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_app_encryption_declarations)) {
            $fields_app_encryption_declarations = ObjectSerializer::serializeCollection($fields_app_encryption_declarations, 'csv', true);
        }
        if ($fields_app_encryption_declarations !== null) {
            $queryParams['fields[appEncryptionDeclarations]'] = ObjectSerializer::toQueryValue($fields_app_encryption_declarations);
        }
        // query params
        if (is_array($fields_beta_app_review_submissions)) {
            $fields_beta_app_review_submissions = ObjectSerializer::serializeCollection($fields_beta_app_review_submissions, 'csv', true);
        }
        if ($fields_beta_app_review_submissions !== null) {
            $queryParams['fields[betaAppReviewSubmissions]'] = ObjectSerializer::toQueryValue($fields_beta_app_review_submissions);
        }
        // query params
        if (is_array($fields_build_beta_details)) {
            $fields_build_beta_details = ObjectSerializer::serializeCollection($fields_build_beta_details, 'csv', true);
        }
        if ($fields_build_beta_details !== null) {
            $queryParams['fields[buildBetaDetails]'] = ObjectSerializer::toQueryValue($fields_build_beta_details);
        }
        // query params
        if (is_array($fields_build_icons)) {
            $fields_build_icons = ObjectSerializer::serializeCollection($fields_build_icons, 'csv', true);
        }
        if ($fields_build_icons !== null) {
            $queryParams['fields[buildIcons]'] = ObjectSerializer::toQueryValue($fields_build_icons);
        }
        // query params
        if (is_array($fields_perf_power_metrics)) {
            $fields_perf_power_metrics = ObjectSerializer::serializeCollection($fields_perf_power_metrics, 'csv', true);
        }
        if ($fields_perf_power_metrics !== null) {
            $queryParams['fields[perfPowerMetrics]'] = ObjectSerializer::toQueryValue($fields_perf_power_metrics);
        }
        // query params
        if (is_array($fields_pre_release_versions)) {
            $fields_pre_release_versions = ObjectSerializer::serializeCollection($fields_pre_release_versions, 'csv', true);
        }
        if ($fields_pre_release_versions !== null) {
            $queryParams['fields[preReleaseVersions]'] = ObjectSerializer::toQueryValue($fields_pre_release_versions);
        }
        // query params
        if (is_array($fields_app_store_versions)) {
            $fields_app_store_versions = ObjectSerializer::serializeCollection($fields_app_store_versions, 'csv', true);
        }
        if ($fields_app_store_versions !== null) {
            $queryParams['fields[appStoreVersions]'] = ObjectSerializer::toQueryValue($fields_app_store_versions);
        }
        // query params
        if (is_array($fields_diagnostic_signatures)) {
            $fields_diagnostic_signatures = ObjectSerializer::serializeCollection($fields_diagnostic_signatures, 'csv', true);
        }
        if ($fields_diagnostic_signatures !== null) {
            $queryParams['fields[diagnosticSignatures]'] = ObjectSerializer::toQueryValue($fields_diagnostic_signatures);
        }
        // query params
        if (is_array($fields_beta_testers)) {
            $fields_beta_testers = ObjectSerializer::serializeCollection($fields_beta_testers, 'csv', true);
        }
        if ($fields_beta_testers !== null) {
            $queryParams['fields[betaTesters]'] = ObjectSerializer::toQueryValue($fields_beta_testers);
        }
        // query params
        if (is_array($fields_beta_build_localizations)) {
            $fields_beta_build_localizations = ObjectSerializer::serializeCollection($fields_beta_build_localizations, 'csv', true);
        }
        if ($fields_beta_build_localizations !== null) {
            $queryParams['fields[betaBuildLocalizations]'] = ObjectSerializer::toQueryValue($fields_beta_build_localizations);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit_beta_build_localizations !== null) {
            $queryParams['limit[betaBuildLocalizations]'] = ObjectSerializer::toQueryValue($limit_beta_build_localizations);
        }
        // query params
        if ($limit_icons !== null) {
            $queryParams['limit[icons]'] = ObjectSerializer::toQueryValue($limit_icons);
        }
        // query params
        if ($limit_individual_testers !== null) {
            $queryParams['limit[individualTesters]'] = ObjectSerializer::toQueryValue($limit_individual_testers);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsGetInstance
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildResponse
     */
    public function buildsGetInstance($id, $fields_builds = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        list($response) = $this->buildsGetInstanceWithHttpInfo($id, $fields_builds, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers);
        return $response;
    }

    /**
     * Operation buildsGetInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsGetInstanceWithHttpInfo($id, $fields_builds = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        $request = $this->buildsGetInstanceRequest($id, $fields_builds, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsGetInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetInstanceAsync($id, $fields_builds = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        return $this->buildsGetInstanceAsyncWithHttpInfo($id, $fields_builds, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsGetInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsGetInstanceAsyncWithHttpInfo($id, $fields_builds = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        $returnType = '\OpenAPI\Client\Model\BuildResponse';
        $request = $this->buildsGetInstanceRequest($id, $fields_builds, $include, $fields_app_encryption_declarations, $fields_beta_app_review_submissions, $fields_build_beta_details, $fields_build_icons, $fields_perf_power_metrics, $fields_pre_release_versions, $fields_app_store_versions, $fields_diagnostic_signatures, $fields_beta_testers, $fields_beta_build_localizations, $fields_apps, $limit_beta_build_localizations, $limit_icons, $limit_individual_testers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsGetInstance'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_builds the fields to include for returned resources of type builds (optional)
     * @param  string[] $include comma-separated list of relationships to include (optional)
     * @param  string[] $fields_app_encryption_declarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param  string[] $fields_beta_app_review_submissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param  string[] $fields_build_beta_details the fields to include for returned resources of type buildBetaDetails (optional)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  string[] $fields_perf_power_metrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param  string[] $fields_app_store_versions the fields to include for returned resources of type appStoreVersions (optional)
     * @param  string[] $fields_diagnostic_signatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  string[] $fields_beta_build_localizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param  string[] $fields_apps the fields to include for returned resources of type apps (optional)
     * @param  int $limit_beta_build_localizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param  int $limit_icons maximum number of related icons returned (when they are included) (optional)
     * @param  int $limit_individual_testers maximum number of related individualTesters returned (when they are included) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsGetInstanceRequest($id, $fields_builds = null, $include = null, $fields_app_encryption_declarations = null, $fields_beta_app_review_submissions = null, $fields_build_beta_details = null, $fields_build_icons = null, $fields_perf_power_metrics = null, $fields_pre_release_versions = null, $fields_app_store_versions = null, $fields_diagnostic_signatures = null, $fields_beta_testers = null, $fields_beta_build_localizations = null, $fields_apps = null, $limit_beta_build_localizations = null, $limit_icons = null, $limit_individual_testers = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsGetInstance'
            );
        }
        if ($limit_beta_build_localizations !== null && $limit_beta_build_localizations > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_beta_build_localizations" when calling BuildsApi.buildsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_icons !== null && $limit_icons > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_icons" when calling BuildsApi.buildsGetInstance, must be smaller than or equal to 50.');
        }

        if ($limit_individual_testers !== null && $limit_individual_testers > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit_individual_testers" when calling BuildsApi.buildsGetInstance, must be smaller than or equal to 50.');
        }


        $resourcePath = '/v1/builds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_builds)) {
            $fields_builds = ObjectSerializer::serializeCollection($fields_builds, 'csv', true);
        }
        if ($fields_builds !== null) {
            $queryParams['fields[builds]'] = ObjectSerializer::toQueryValue($fields_builds);
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if (is_array($fields_app_encryption_declarations)) {
            $fields_app_encryption_declarations = ObjectSerializer::serializeCollection($fields_app_encryption_declarations, 'csv', true);
        }
        if ($fields_app_encryption_declarations !== null) {
            $queryParams['fields[appEncryptionDeclarations]'] = ObjectSerializer::toQueryValue($fields_app_encryption_declarations);
        }
        // query params
        if (is_array($fields_beta_app_review_submissions)) {
            $fields_beta_app_review_submissions = ObjectSerializer::serializeCollection($fields_beta_app_review_submissions, 'csv', true);
        }
        if ($fields_beta_app_review_submissions !== null) {
            $queryParams['fields[betaAppReviewSubmissions]'] = ObjectSerializer::toQueryValue($fields_beta_app_review_submissions);
        }
        // query params
        if (is_array($fields_build_beta_details)) {
            $fields_build_beta_details = ObjectSerializer::serializeCollection($fields_build_beta_details, 'csv', true);
        }
        if ($fields_build_beta_details !== null) {
            $queryParams['fields[buildBetaDetails]'] = ObjectSerializer::toQueryValue($fields_build_beta_details);
        }
        // query params
        if (is_array($fields_build_icons)) {
            $fields_build_icons = ObjectSerializer::serializeCollection($fields_build_icons, 'csv', true);
        }
        if ($fields_build_icons !== null) {
            $queryParams['fields[buildIcons]'] = ObjectSerializer::toQueryValue($fields_build_icons);
        }
        // query params
        if (is_array($fields_perf_power_metrics)) {
            $fields_perf_power_metrics = ObjectSerializer::serializeCollection($fields_perf_power_metrics, 'csv', true);
        }
        if ($fields_perf_power_metrics !== null) {
            $queryParams['fields[perfPowerMetrics]'] = ObjectSerializer::toQueryValue($fields_perf_power_metrics);
        }
        // query params
        if (is_array($fields_pre_release_versions)) {
            $fields_pre_release_versions = ObjectSerializer::serializeCollection($fields_pre_release_versions, 'csv', true);
        }
        if ($fields_pre_release_versions !== null) {
            $queryParams['fields[preReleaseVersions]'] = ObjectSerializer::toQueryValue($fields_pre_release_versions);
        }
        // query params
        if (is_array($fields_app_store_versions)) {
            $fields_app_store_versions = ObjectSerializer::serializeCollection($fields_app_store_versions, 'csv', true);
        }
        if ($fields_app_store_versions !== null) {
            $queryParams['fields[appStoreVersions]'] = ObjectSerializer::toQueryValue($fields_app_store_versions);
        }
        // query params
        if (is_array($fields_diagnostic_signatures)) {
            $fields_diagnostic_signatures = ObjectSerializer::serializeCollection($fields_diagnostic_signatures, 'csv', true);
        }
        if ($fields_diagnostic_signatures !== null) {
            $queryParams['fields[diagnosticSignatures]'] = ObjectSerializer::toQueryValue($fields_diagnostic_signatures);
        }
        // query params
        if (is_array($fields_beta_testers)) {
            $fields_beta_testers = ObjectSerializer::serializeCollection($fields_beta_testers, 'csv', true);
        }
        if ($fields_beta_testers !== null) {
            $queryParams['fields[betaTesters]'] = ObjectSerializer::toQueryValue($fields_beta_testers);
        }
        // query params
        if (is_array($fields_beta_build_localizations)) {
            $fields_beta_build_localizations = ObjectSerializer::serializeCollection($fields_beta_build_localizations, 'csv', true);
        }
        if ($fields_beta_build_localizations !== null) {
            $queryParams['fields[betaBuildLocalizations]'] = ObjectSerializer::toQueryValue($fields_beta_build_localizations);
        }
        // query params
        if (is_array($fields_apps)) {
            $fields_apps = ObjectSerializer::serializeCollection($fields_apps, 'csv', true);
        }
        if ($fields_apps !== null) {
            $queryParams['fields[apps]'] = ObjectSerializer::toQueryValue($fields_apps);
        }
        // query params
        if ($limit_beta_build_localizations !== null) {
            $queryParams['limit[betaBuildLocalizations]'] = ObjectSerializer::toQueryValue($limit_beta_build_localizations);
        }
        // query params
        if ($limit_icons !== null) {
            $queryParams['limit[icons]'] = ObjectSerializer::toQueryValue($limit_icons);
        }
        // query params
        if ($limit_individual_testers !== null) {
            $queryParams['limit[individualTesters]'] = ObjectSerializer::toQueryValue($limit_individual_testers);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsIconsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildIconsResponse
     */
    public function buildsIconsGetToManyRelated($id, $fields_build_icons = null, $limit = null)
    {
        list($response) = $this->buildsIconsGetToManyRelatedWithHttpInfo($id, $fields_build_icons, $limit);
        return $response;
    }

    /**
     * Operation buildsIconsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildIconsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsIconsGetToManyRelatedWithHttpInfo($id, $fields_build_icons = null, $limit = null)
    {
        $request = $this->buildsIconsGetToManyRelatedRequest($id, $fields_build_icons, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildIconsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildIconsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildIconsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildIconsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsIconsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIconsGetToManyRelatedAsync($id, $fields_build_icons = null, $limit = null)
    {
        return $this->buildsIconsGetToManyRelatedAsyncWithHttpInfo($id, $fields_build_icons, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsIconsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIconsGetToManyRelatedAsyncWithHttpInfo($id, $fields_build_icons = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BuildIconsResponse';
        $request = $this->buildsIconsGetToManyRelatedRequest($id, $fields_build_icons, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsIconsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_build_icons the fields to include for returned resources of type buildIcons (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsIconsGetToManyRelatedRequest($id, $fields_build_icons = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsIconsGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BuildsApi.buildsIconsGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/builds/{id}/icons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_build_icons)) {
            $fields_build_icons = ObjectSerializer::serializeCollection($fields_build_icons, 'csv', true);
        }
        if ($fields_build_icons !== null) {
            $queryParams['fields[buildIcons]'] = ObjectSerializer::toQueryValue($fields_build_icons);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsIndividualTestersCreateToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function buildsIndividualTestersCreateToManyRelationship($id, $build_individual_testers_linkages_request)
    {
        $this->buildsIndividualTestersCreateToManyRelationshipWithHttpInfo($id, $build_individual_testers_linkages_request);
    }

    /**
     * Operation buildsIndividualTestersCreateToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsIndividualTestersCreateToManyRelationshipWithHttpInfo($id, $build_individual_testers_linkages_request)
    {
        $request = $this->buildsIndividualTestersCreateToManyRelationshipRequest($id, $build_individual_testers_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsIndividualTestersCreateToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersCreateToManyRelationshipAsync($id, $build_individual_testers_linkages_request)
    {
        return $this->buildsIndividualTestersCreateToManyRelationshipAsyncWithHttpInfo($id, $build_individual_testers_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsIndividualTestersCreateToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersCreateToManyRelationshipAsyncWithHttpInfo($id, $build_individual_testers_linkages_request)
    {
        $returnType = '';
        $request = $this->buildsIndividualTestersCreateToManyRelationshipRequest($id, $build_individual_testers_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsIndividualTestersCreateToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsIndividualTestersCreateToManyRelationshipRequest($id, $build_individual_testers_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsIndividualTestersCreateToManyRelationship'
            );
        }
        // verify the required parameter 'build_individual_testers_linkages_request' is set
        if ($build_individual_testers_linkages_request === null || (is_array($build_individual_testers_linkages_request) && count($build_individual_testers_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_individual_testers_linkages_request when calling buildsIndividualTestersCreateToManyRelationship'
            );
        }

        $resourcePath = '/v1/builds/{id}/relationships/individualTesters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($build_individual_testers_linkages_request)) {
            $_tempBody = $build_individual_testers_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsIndividualTestersDeleteToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function buildsIndividualTestersDeleteToManyRelationship($id, $build_individual_testers_linkages_request)
    {
        $this->buildsIndividualTestersDeleteToManyRelationshipWithHttpInfo($id, $build_individual_testers_linkages_request);
    }

    /**
     * Operation buildsIndividualTestersDeleteToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsIndividualTestersDeleteToManyRelationshipWithHttpInfo($id, $build_individual_testers_linkages_request)
    {
        $request = $this->buildsIndividualTestersDeleteToManyRelationshipRequest($id, $build_individual_testers_linkages_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsIndividualTestersDeleteToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersDeleteToManyRelationshipAsync($id, $build_individual_testers_linkages_request)
    {
        return $this->buildsIndividualTestersDeleteToManyRelationshipAsyncWithHttpInfo($id, $build_individual_testers_linkages_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsIndividualTestersDeleteToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersDeleteToManyRelationshipAsyncWithHttpInfo($id, $build_individual_testers_linkages_request)
    {
        $returnType = '';
        $request = $this->buildsIndividualTestersDeleteToManyRelationshipRequest($id, $build_individual_testers_linkages_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsIndividualTestersDeleteToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildIndividualTestersLinkagesRequest $build_individual_testers_linkages_request List of related linkages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsIndividualTestersDeleteToManyRelationshipRequest($id, $build_individual_testers_linkages_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsIndividualTestersDeleteToManyRelationship'
            );
        }
        // verify the required parameter 'build_individual_testers_linkages_request' is set
        if ($build_individual_testers_linkages_request === null || (is_array($build_individual_testers_linkages_request) && count($build_individual_testers_linkages_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_individual_testers_linkages_request when calling buildsIndividualTestersDeleteToManyRelationship'
            );
        }

        $resourcePath = '/v1/builds/{id}/relationships/individualTesters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($build_individual_testers_linkages_request)) {
            $_tempBody = $build_individual_testers_linkages_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTestersResponse
     */
    public function buildsIndividualTestersGetToManyRelated($id, $fields_beta_testers = null, $limit = null)
    {
        list($response) = $this->buildsIndividualTestersGetToManyRelatedWithHttpInfo($id, $fields_beta_testers, $limit);
        return $response;
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BetaTestersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsIndividualTestersGetToManyRelatedWithHttpInfo($id, $fields_beta_testers = null, $limit = null)
    {
        $request = $this->buildsIndividualTestersGetToManyRelatedRequest($id, $fields_beta_testers, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BetaTestersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BetaTestersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BetaTestersResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BetaTestersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersGetToManyRelatedAsync($id, $fields_beta_testers = null, $limit = null)
    {
        return $this->buildsIndividualTestersGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_testers, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersGetToManyRelatedAsyncWithHttpInfo($id, $fields_beta_testers = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BetaTestersResponse';
        $request = $this->buildsIndividualTestersGetToManyRelatedRequest($id, $fields_beta_testers, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsIndividualTestersGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_beta_testers the fields to include for returned resources of type betaTesters (optional)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsIndividualTestersGetToManyRelatedRequest($id, $fields_beta_testers = null, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsIndividualTestersGetToManyRelated'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BuildsApi.buildsIndividualTestersGetToManyRelated, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/builds/{id}/individualTesters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_beta_testers)) {
            $fields_beta_testers = ObjectSerializer::serializeCollection($fields_beta_testers, 'csv', true);
        }
        if ($fields_beta_testers !== null) {
            $queryParams['fields[betaTesters]'] = ObjectSerializer::toQueryValue($fields_beta_testers);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelationship
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildIndividualTestersLinkagesResponse
     */
    public function buildsIndividualTestersGetToManyRelationship($id, $limit = null)
    {
        list($response) = $this->buildsIndividualTestersGetToManyRelationshipWithHttpInfo($id, $limit);
        return $response;
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelationshipWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildIndividualTestersLinkagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsIndividualTestersGetToManyRelationshipWithHttpInfo($id, $limit = null)
    {
        $request = $this->buildsIndividualTestersGetToManyRelationshipRequest($id, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildIndividualTestersLinkagesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildIndividualTestersLinkagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildIndividualTestersLinkagesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildIndividualTestersLinkagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelationshipAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersGetToManyRelationshipAsync($id, $limit = null)
    {
        return $this->buildsIndividualTestersGetToManyRelationshipAsyncWithHttpInfo($id, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsIndividualTestersGetToManyRelationshipAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsIndividualTestersGetToManyRelationshipAsyncWithHttpInfo($id, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\BuildIndividualTestersLinkagesResponse';
        $request = $this->buildsIndividualTestersGetToManyRelationshipRequest($id, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsIndividualTestersGetToManyRelationship'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  int $limit maximum resources per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsIndividualTestersGetToManyRelationshipRequest($id, $limit = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsIndividualTestersGetToManyRelationship'
            );
        }
        if ($limit !== null && $limit > 200) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling BuildsApi.buildsIndividualTestersGetToManyRelationship, must be smaller than or equal to 200.');
        }


        $resourcePath = '/v1/builds/{id}/relationships/individualTesters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsPerfPowerMetricsGetToManyRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PerfPowerMetricsResponse
     */
    public function buildsPerfPowerMetricsGetToManyRelated($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        list($response) = $this->buildsPerfPowerMetricsGetToManyRelatedWithHttpInfo($id, $filter_device_type, $filter_metric_type, $filter_platform);
        return $response;
    }

    /**
     * Operation buildsPerfPowerMetricsGetToManyRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PerfPowerMetricsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsPerfPowerMetricsGetToManyRelatedWithHttpInfo($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        $request = $this->buildsPerfPowerMetricsGetToManyRelatedRequest($id, $filter_device_type, $filter_metric_type, $filter_platform);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PerfPowerMetricsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PerfPowerMetricsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PerfPowerMetricsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PerfPowerMetricsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsPerfPowerMetricsGetToManyRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsPerfPowerMetricsGetToManyRelatedAsync($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        return $this->buildsPerfPowerMetricsGetToManyRelatedAsyncWithHttpInfo($id, $filter_device_type, $filter_metric_type, $filter_platform)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsPerfPowerMetricsGetToManyRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsPerfPowerMetricsGetToManyRelatedAsyncWithHttpInfo($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        $returnType = '\OpenAPI\Client\Model\PerfPowerMetricsResponse';
        $request = $this->buildsPerfPowerMetricsGetToManyRelatedRequest($id, $filter_device_type, $filter_metric_type, $filter_platform);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsPerfPowerMetricsGetToManyRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $filter_device_type filter by attribute &#39;deviceType&#39; (optional)
     * @param  string[] $filter_metric_type filter by attribute &#39;metricType&#39; (optional)
     * @param  string[] $filter_platform filter by attribute &#39;platform&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsPerfPowerMetricsGetToManyRelatedRequest($id, $filter_device_type = null, $filter_metric_type = null, $filter_platform = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsPerfPowerMetricsGetToManyRelated'
            );
        }

        $resourcePath = '/v1/builds/{id}/perfPowerMetrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($filter_device_type)) {
            $filter_device_type = ObjectSerializer::serializeCollection($filter_device_type, 'csv', true);
        }
        if ($filter_device_type !== null) {
            $queryParams['filter[deviceType]'] = ObjectSerializer::toQueryValue($filter_device_type);
        }
        // query params
        if (is_array($filter_metric_type)) {
            $filter_metric_type = ObjectSerializer::serializeCollection($filter_metric_type, 'csv', true);
        }
        if ($filter_metric_type !== null) {
            $queryParams['filter[metricType]'] = ObjectSerializer::toQueryValue($filter_metric_type);
        }
        // query params
        if (is_array($filter_platform)) {
            $filter_platform = ObjectSerializer::serializeCollection($filter_platform, 'csv', true);
        }
        if ($filter_platform !== null) {
            $queryParams['filter[platform]'] = ObjectSerializer::toQueryValue($filter_platform);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsPreReleaseVersionGetToOneRelated
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PrereleaseVersionResponse
     */
    public function buildsPreReleaseVersionGetToOneRelated($id, $fields_pre_release_versions = null)
    {
        list($response) = $this->buildsPreReleaseVersionGetToOneRelatedWithHttpInfo($id, $fields_pre_release_versions);
        return $response;
    }

    /**
     * Operation buildsPreReleaseVersionGetToOneRelatedWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\PrereleaseVersionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsPreReleaseVersionGetToOneRelatedWithHttpInfo($id, $fields_pre_release_versions = null)
    {
        $request = $this->buildsPreReleaseVersionGetToOneRelatedRequest($id, $fields_pre_release_versions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PrereleaseVersionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PrereleaseVersionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PrereleaseVersionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PrereleaseVersionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsPreReleaseVersionGetToOneRelatedAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsPreReleaseVersionGetToOneRelatedAsync($id, $fields_pre_release_versions = null)
    {
        return $this->buildsPreReleaseVersionGetToOneRelatedAsyncWithHttpInfo($id, $fields_pre_release_versions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsPreReleaseVersionGetToOneRelatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsPreReleaseVersionGetToOneRelatedAsyncWithHttpInfo($id, $fields_pre_release_versions = null)
    {
        $returnType = '\OpenAPI\Client\Model\PrereleaseVersionResponse';
        $request = $this->buildsPreReleaseVersionGetToOneRelatedRequest($id, $fields_pre_release_versions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsPreReleaseVersionGetToOneRelated'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  string[] $fields_pre_release_versions the fields to include for returned resources of type preReleaseVersions (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsPreReleaseVersionGetToOneRelatedRequest($id, $fields_pre_release_versions = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsPreReleaseVersionGetToOneRelated'
            );
        }

        $resourcePath = '/v1/builds/{id}/preReleaseVersion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields_pre_release_versions)) {
            $fields_pre_release_versions = ObjectSerializer::serializeCollection($fields_pre_release_versions, 'csv', true);
        }
        if ($fields_pre_release_versions !== null) {
            $queryParams['fields[preReleaseVersions]'] = ObjectSerializer::toQueryValue($fields_pre_release_versions);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation buildsUpdateInstance
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildUpdateRequest $build_update_request Build representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildResponse|\OpenAPI\Client\Model\ErrorResponse
     */
    public function buildsUpdateInstance($id, $build_update_request)
    {
        list($response) = $this->buildsUpdateInstanceWithHttpInfo($id, $build_update_request);
        return $response;
    }

    /**
     * Operation buildsUpdateInstanceWithHttpInfo
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildUpdateRequest $build_update_request Build representation (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\ErrorResponse|\OpenAPI\Client\Model\BuildResponse|\OpenAPI\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildsUpdateInstanceWithHttpInfo($id, $build_update_request)
    {
        $request = $this->buildsUpdateInstanceRequest($id, $build_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\BuildResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BuildResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BuildResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BuildResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildsUpdateInstanceAsync
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildUpdateRequest $build_update_request Build representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsUpdateInstanceAsync($id, $build_update_request)
    {
        return $this->buildsUpdateInstanceAsyncWithHttpInfo($id, $build_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildsUpdateInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildUpdateRequest $build_update_request Build representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildsUpdateInstanceAsyncWithHttpInfo($id, $build_update_request)
    {
        $returnType = '\OpenAPI\Client\Model\BuildResponse';
        $request = $this->buildsUpdateInstanceRequest($id, $build_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildsUpdateInstance'
     *
     * @param  string $id the id of the requested resource (required)
     * @param  \OpenAPI\Client\Model\BuildUpdateRequest $build_update_request Build representation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildsUpdateInstanceRequest($id, $build_update_request)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling buildsUpdateInstance'
            );
        }
        // verify the required parameter 'build_update_request' is set
        if ($build_update_request === null || (is_array($build_update_request) && count($build_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $build_update_request when calling buildsUpdateInstance'
            );
        }

        $resourcePath = '/v1/builds/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($build_update_request)) {
            $_tempBody = $build_update_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
