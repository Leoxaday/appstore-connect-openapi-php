<?php
/**
 * BuildRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BuildRelationships Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BuildRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Build_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pre_release_version' => '\OpenAPI\Client\Model\BuildRelationshipsPreReleaseVersion',
        'individual_testers' => '\OpenAPI\Client\Model\BetaGroupRelationshipsBetaTesters',
        'beta_build_localizations' => '\OpenAPI\Client\Model\BuildRelationshipsBetaBuildLocalizations',
        'app_encryption_declaration' => '\OpenAPI\Client\Model\BuildRelationshipsAppEncryptionDeclaration',
        'beta_app_review_submission' => '\OpenAPI\Client\Model\BuildRelationshipsBetaAppReviewSubmission',
        'app' => '\OpenAPI\Client\Model\AppEncryptionDeclarationRelationshipsApp',
        'build_beta_detail' => '\OpenAPI\Client\Model\BuildRelationshipsBuildBetaDetail',
        'app_store_version' => '\OpenAPI\Client\Model\AppStoreReviewDetailRelationshipsAppStoreVersion',
        'icons' => '\OpenAPI\Client\Model\BuildRelationshipsIcons'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'pre_release_version' => null,
        'individual_testers' => null,
        'beta_build_localizations' => null,
        'app_encryption_declaration' => null,
        'beta_app_review_submission' => null,
        'app' => null,
        'build_beta_detail' => null,
        'app_store_version' => null,
        'icons' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pre_release_version' => 'preReleaseVersion',
        'individual_testers' => 'individualTesters',
        'beta_build_localizations' => 'betaBuildLocalizations',
        'app_encryption_declaration' => 'appEncryptionDeclaration',
        'beta_app_review_submission' => 'betaAppReviewSubmission',
        'app' => 'app',
        'build_beta_detail' => 'buildBetaDetail',
        'app_store_version' => 'appStoreVersion',
        'icons' => 'icons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pre_release_version' => 'setPreReleaseVersion',
        'individual_testers' => 'setIndividualTesters',
        'beta_build_localizations' => 'setBetaBuildLocalizations',
        'app_encryption_declaration' => 'setAppEncryptionDeclaration',
        'beta_app_review_submission' => 'setBetaAppReviewSubmission',
        'app' => 'setApp',
        'build_beta_detail' => 'setBuildBetaDetail',
        'app_store_version' => 'setAppStoreVersion',
        'icons' => 'setIcons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pre_release_version' => 'getPreReleaseVersion',
        'individual_testers' => 'getIndividualTesters',
        'beta_build_localizations' => 'getBetaBuildLocalizations',
        'app_encryption_declaration' => 'getAppEncryptionDeclaration',
        'beta_app_review_submission' => 'getBetaAppReviewSubmission',
        'app' => 'getApp',
        'build_beta_detail' => 'getBuildBetaDetail',
        'app_store_version' => 'getAppStoreVersion',
        'icons' => 'getIcons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pre_release_version'] = isset($data['pre_release_version']) ? $data['pre_release_version'] : null;
        $this->container['individual_testers'] = isset($data['individual_testers']) ? $data['individual_testers'] : null;
        $this->container['beta_build_localizations'] = isset($data['beta_build_localizations']) ? $data['beta_build_localizations'] : null;
        $this->container['app_encryption_declaration'] = isset($data['app_encryption_declaration']) ? $data['app_encryption_declaration'] : null;
        $this->container['beta_app_review_submission'] = isset($data['beta_app_review_submission']) ? $data['beta_app_review_submission'] : null;
        $this->container['app'] = isset($data['app']) ? $data['app'] : null;
        $this->container['build_beta_detail'] = isset($data['build_beta_detail']) ? $data['build_beta_detail'] : null;
        $this->container['app_store_version'] = isset($data['app_store_version']) ? $data['app_store_version'] : null;
        $this->container['icons'] = isset($data['icons']) ? $data['icons'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pre_release_version
     *
     * @return \OpenAPI\Client\Model\BuildRelationshipsPreReleaseVersion|null
     */
    public function getPreReleaseVersion()
    {
        return $this->container['pre_release_version'];
    }

    /**
     * Sets pre_release_version
     *
     * @param \OpenAPI\Client\Model\BuildRelationshipsPreReleaseVersion|null $pre_release_version pre_release_version
     *
     * @return $this
     */
    public function setPreReleaseVersion($pre_release_version)
    {
        $this->container['pre_release_version'] = $pre_release_version;

        return $this;
    }

    /**
     * Gets individual_testers
     *
     * @return \OpenAPI\Client\Model\BetaGroupRelationshipsBetaTesters|null
     */
    public function getIndividualTesters()
    {
        return $this->container['individual_testers'];
    }

    /**
     * Sets individual_testers
     *
     * @param \OpenAPI\Client\Model\BetaGroupRelationshipsBetaTesters|null $individual_testers individual_testers
     *
     * @return $this
     */
    public function setIndividualTesters($individual_testers)
    {
        $this->container['individual_testers'] = $individual_testers;

        return $this;
    }

    /**
     * Gets beta_build_localizations
     *
     * @return \OpenAPI\Client\Model\BuildRelationshipsBetaBuildLocalizations|null
     */
    public function getBetaBuildLocalizations()
    {
        return $this->container['beta_build_localizations'];
    }

    /**
     * Sets beta_build_localizations
     *
     * @param \OpenAPI\Client\Model\BuildRelationshipsBetaBuildLocalizations|null $beta_build_localizations beta_build_localizations
     *
     * @return $this
     */
    public function setBetaBuildLocalizations($beta_build_localizations)
    {
        $this->container['beta_build_localizations'] = $beta_build_localizations;

        return $this;
    }

    /**
     * Gets app_encryption_declaration
     *
     * @return \OpenAPI\Client\Model\BuildRelationshipsAppEncryptionDeclaration|null
     */
    public function getAppEncryptionDeclaration()
    {
        return $this->container['app_encryption_declaration'];
    }

    /**
     * Sets app_encryption_declaration
     *
     * @param \OpenAPI\Client\Model\BuildRelationshipsAppEncryptionDeclaration|null $app_encryption_declaration app_encryption_declaration
     *
     * @return $this
     */
    public function setAppEncryptionDeclaration($app_encryption_declaration)
    {
        $this->container['app_encryption_declaration'] = $app_encryption_declaration;

        return $this;
    }

    /**
     * Gets beta_app_review_submission
     *
     * @return \OpenAPI\Client\Model\BuildRelationshipsBetaAppReviewSubmission|null
     */
    public function getBetaAppReviewSubmission()
    {
        return $this->container['beta_app_review_submission'];
    }

    /**
     * Sets beta_app_review_submission
     *
     * @param \OpenAPI\Client\Model\BuildRelationshipsBetaAppReviewSubmission|null $beta_app_review_submission beta_app_review_submission
     *
     * @return $this
     */
    public function setBetaAppReviewSubmission($beta_app_review_submission)
    {
        $this->container['beta_app_review_submission'] = $beta_app_review_submission;

        return $this;
    }

    /**
     * Gets app
     *
     * @return \OpenAPI\Client\Model\AppEncryptionDeclarationRelationshipsApp|null
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param \OpenAPI\Client\Model\AppEncryptionDeclarationRelationshipsApp|null $app app
     *
     * @return $this
     */
    public function setApp($app)
    {
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets build_beta_detail
     *
     * @return \OpenAPI\Client\Model\BuildRelationshipsBuildBetaDetail|null
     */
    public function getBuildBetaDetail()
    {
        return $this->container['build_beta_detail'];
    }

    /**
     * Sets build_beta_detail
     *
     * @param \OpenAPI\Client\Model\BuildRelationshipsBuildBetaDetail|null $build_beta_detail build_beta_detail
     *
     * @return $this
     */
    public function setBuildBetaDetail($build_beta_detail)
    {
        $this->container['build_beta_detail'] = $build_beta_detail;

        return $this;
    }

    /**
     * Gets app_store_version
     *
     * @return \OpenAPI\Client\Model\AppStoreReviewDetailRelationshipsAppStoreVersion|null
     */
    public function getAppStoreVersion()
    {
        return $this->container['app_store_version'];
    }

    /**
     * Sets app_store_version
     *
     * @param \OpenAPI\Client\Model\AppStoreReviewDetailRelationshipsAppStoreVersion|null $app_store_version app_store_version
     *
     * @return $this
     */
    public function setAppStoreVersion($app_store_version)
    {
        $this->container['app_store_version'] = $app_store_version;

        return $this;
    }

    /**
     * Gets icons
     *
     * @return \OpenAPI\Client\Model\BuildRelationshipsIcons|null
     */
    public function getIcons()
    {
        return $this->container['icons'];
    }

    /**
     * Sets icons
     *
     * @param \OpenAPI\Client\Model\BuildRelationshipsIcons|null $icons icons
     *
     * @return $this
     */
    public function setIcons($icons)
    {
        $this->container['icons'] = $icons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


