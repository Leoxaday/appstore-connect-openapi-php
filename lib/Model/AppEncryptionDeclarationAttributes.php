<?php
/**
 * AppEncryptionDeclarationAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AppEncryptionDeclarationAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AppEncryptionDeclarationAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AppEncryptionDeclaration_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uses_encryption' => 'bool',
        'exempt' => 'bool',
        'contains_proprietary_cryptography' => 'bool',
        'contains_third_party_cryptography' => 'bool',
        'available_on_french_store' => 'bool',
        'platform' => '\OpenAPI\Client\Model\Platform',
        'uploaded_date' => '\DateTime',
        'document_url' => 'string',
        'document_name' => 'string',
        'document_type' => 'string',
        'app_encryption_declaration_state' => '\OpenAPI\Client\Model\AppEncryptionDeclarationState',
        'code_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uses_encryption' => null,
        'exempt' => null,
        'contains_proprietary_cryptography' => null,
        'contains_third_party_cryptography' => null,
        'available_on_french_store' => null,
        'platform' => null,
        'uploaded_date' => 'date-time',
        'document_url' => null,
        'document_name' => null,
        'document_type' => null,
        'app_encryption_declaration_state' => null,
        'code_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uses_encryption' => 'usesEncryption',
        'exempt' => 'exempt',
        'contains_proprietary_cryptography' => 'containsProprietaryCryptography',
        'contains_third_party_cryptography' => 'containsThirdPartyCryptography',
        'available_on_french_store' => 'availableOnFrenchStore',
        'platform' => 'platform',
        'uploaded_date' => 'uploadedDate',
        'document_url' => 'documentUrl',
        'document_name' => 'documentName',
        'document_type' => 'documentType',
        'app_encryption_declaration_state' => 'appEncryptionDeclarationState',
        'code_value' => 'codeValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uses_encryption' => 'setUsesEncryption',
        'exempt' => 'setExempt',
        'contains_proprietary_cryptography' => 'setContainsProprietaryCryptography',
        'contains_third_party_cryptography' => 'setContainsThirdPartyCryptography',
        'available_on_french_store' => 'setAvailableOnFrenchStore',
        'platform' => 'setPlatform',
        'uploaded_date' => 'setUploadedDate',
        'document_url' => 'setDocumentUrl',
        'document_name' => 'setDocumentName',
        'document_type' => 'setDocumentType',
        'app_encryption_declaration_state' => 'setAppEncryptionDeclarationState',
        'code_value' => 'setCodeValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uses_encryption' => 'getUsesEncryption',
        'exempt' => 'getExempt',
        'contains_proprietary_cryptography' => 'getContainsProprietaryCryptography',
        'contains_third_party_cryptography' => 'getContainsThirdPartyCryptography',
        'available_on_french_store' => 'getAvailableOnFrenchStore',
        'platform' => 'getPlatform',
        'uploaded_date' => 'getUploadedDate',
        'document_url' => 'getDocumentUrl',
        'document_name' => 'getDocumentName',
        'document_type' => 'getDocumentType',
        'app_encryption_declaration_state' => 'getAppEncryptionDeclarationState',
        'code_value' => 'getCodeValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uses_encryption'] = isset($data['uses_encryption']) ? $data['uses_encryption'] : null;
        $this->container['exempt'] = isset($data['exempt']) ? $data['exempt'] : null;
        $this->container['contains_proprietary_cryptography'] = isset($data['contains_proprietary_cryptography']) ? $data['contains_proprietary_cryptography'] : null;
        $this->container['contains_third_party_cryptography'] = isset($data['contains_third_party_cryptography']) ? $data['contains_third_party_cryptography'] : null;
        $this->container['available_on_french_store'] = isset($data['available_on_french_store']) ? $data['available_on_french_store'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['uploaded_date'] = isset($data['uploaded_date']) ? $data['uploaded_date'] : null;
        $this->container['document_url'] = isset($data['document_url']) ? $data['document_url'] : null;
        $this->container['document_name'] = isset($data['document_name']) ? $data['document_name'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['app_encryption_declaration_state'] = isset($data['app_encryption_declaration_state']) ? $data['app_encryption_declaration_state'] : null;
        $this->container['code_value'] = isset($data['code_value']) ? $data['code_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uses_encryption
     *
     * @return bool|null
     */
    public function getUsesEncryption()
    {
        return $this->container['uses_encryption'];
    }

    /**
     * Sets uses_encryption
     *
     * @param bool|null $uses_encryption uses_encryption
     *
     * @return $this
     */
    public function setUsesEncryption($uses_encryption)
    {
        $this->container['uses_encryption'] = $uses_encryption;

        return $this;
    }

    /**
     * Gets exempt
     *
     * @return bool|null
     */
    public function getExempt()
    {
        return $this->container['exempt'];
    }

    /**
     * Sets exempt
     *
     * @param bool|null $exempt exempt
     *
     * @return $this
     */
    public function setExempt($exempt)
    {
        $this->container['exempt'] = $exempt;

        return $this;
    }

    /**
     * Gets contains_proprietary_cryptography
     *
     * @return bool|null
     */
    public function getContainsProprietaryCryptography()
    {
        return $this->container['contains_proprietary_cryptography'];
    }

    /**
     * Sets contains_proprietary_cryptography
     *
     * @param bool|null $contains_proprietary_cryptography contains_proprietary_cryptography
     *
     * @return $this
     */
    public function setContainsProprietaryCryptography($contains_proprietary_cryptography)
    {
        $this->container['contains_proprietary_cryptography'] = $contains_proprietary_cryptography;

        return $this;
    }

    /**
     * Gets contains_third_party_cryptography
     *
     * @return bool|null
     */
    public function getContainsThirdPartyCryptography()
    {
        return $this->container['contains_third_party_cryptography'];
    }

    /**
     * Sets contains_third_party_cryptography
     *
     * @param bool|null $contains_third_party_cryptography contains_third_party_cryptography
     *
     * @return $this
     */
    public function setContainsThirdPartyCryptography($contains_third_party_cryptography)
    {
        $this->container['contains_third_party_cryptography'] = $contains_third_party_cryptography;

        return $this;
    }

    /**
     * Gets available_on_french_store
     *
     * @return bool|null
     */
    public function getAvailableOnFrenchStore()
    {
        return $this->container['available_on_french_store'];
    }

    /**
     * Sets available_on_french_store
     *
     * @param bool|null $available_on_french_store available_on_french_store
     *
     * @return $this
     */
    public function setAvailableOnFrenchStore($available_on_french_store)
    {
        $this->container['available_on_french_store'] = $available_on_french_store;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return \OpenAPI\Client\Model\Platform|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param \OpenAPI\Client\Model\Platform|null $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets uploaded_date
     *
     * @return \DateTime|null
     */
    public function getUploadedDate()
    {
        return $this->container['uploaded_date'];
    }

    /**
     * Sets uploaded_date
     *
     * @param \DateTime|null $uploaded_date uploaded_date
     *
     * @return $this
     */
    public function setUploadedDate($uploaded_date)
    {
        $this->container['uploaded_date'] = $uploaded_date;

        return $this;
    }

    /**
     * Gets document_url
     *
     * @return string|null
     */
    public function getDocumentUrl()
    {
        return $this->container['document_url'];
    }

    /**
     * Sets document_url
     *
     * @param string|null $document_url document_url
     *
     * @return $this
     */
    public function setDocumentUrl($document_url)
    {
        $this->container['document_url'] = $document_url;

        return $this;
    }

    /**
     * Gets document_name
     *
     * @return string|null
     */
    public function getDocumentName()
    {
        return $this->container['document_name'];
    }

    /**
     * Sets document_name
     *
     * @param string|null $document_name document_name
     *
     * @return $this
     */
    public function setDocumentName($document_name)
    {
        $this->container['document_name'] = $document_name;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets app_encryption_declaration_state
     *
     * @return \OpenAPI\Client\Model\AppEncryptionDeclarationState|null
     */
    public function getAppEncryptionDeclarationState()
    {
        return $this->container['app_encryption_declaration_state'];
    }

    /**
     * Sets app_encryption_declaration_state
     *
     * @param \OpenAPI\Client\Model\AppEncryptionDeclarationState|null $app_encryption_declaration_state app_encryption_declaration_state
     *
     * @return $this
     */
    public function setAppEncryptionDeclarationState($app_encryption_declaration_state)
    {
        $this->container['app_encryption_declaration_state'] = $app_encryption_declaration_state;

        return $this;
    }

    /**
     * Gets code_value
     *
     * @return string|null
     */
    public function getCodeValue()
    {
        return $this->container['code_value'];
    }

    /**
     * Sets code_value
     *
     * @param string|null $code_value code_value
     *
     * @return $this
     */
    public function setCodeValue($code_value)
    {
        $this->container['code_value'] = $code_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


